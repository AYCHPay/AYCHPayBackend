// Code generated by mockery v1.0.0
package storage

import mock "github.com/stretchr/testify/mock"

// MockEngine is an autogenerated mock type for the Engine type
type MockEngine struct {
	mock.Mock
}

// AddBinary provides a mock function with given fields: binary, version
func (_m *MockEngine) AddBinary(binary []byte, version string) error {
	ret := _m.Called(binary, version)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, string) error); ok {
		r0 = rf(binary, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBinary provides a mock function with given fields: version
func (_m *MockEngine) DeleteBinary(version string) error {
	ret := _m.Called(version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBinary provides a mock function with given fields: version
func (_m *MockEngine) GetBinary(version string) ([]byte, error) {
	ret := _m.Called(version)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionsList provides a mock function with given fields:
func (_m *MockEngine) GetVersionsList() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
