// Code generated by go-bindata.
// sources:
// static/1block
// static/alert_success.html
// static/anonym_history.html
// static/anonym_money_transfer.html
// static/change_node_key.html
// static/citizen_bill_payment.html
// static/citizen_marriage_registration.html
// static/citizen_property.html
// static/citizen_rule_details.html
// static/company_application_purchase.html
// static/company_contract.html
// static/company_currency_exchange.html
// static/company_new_good.html
// static/company_new_item.html
// static/company_offer_seller.html
// static/company_offer_transport.html
// static/company_select_transport.html
// static/company_shares.html
// static/company_shares_exchange.html
// static/company_smart_contracts.html
// static/css/app.css
// static/css/bootstrap.css
// static/css/style.css
// static/css/theme-a.css
// static/css/theme-b.css
// static/css/theme-c.css
// static/css/theme-d.css
// static/css/theme-e.css
// static/css/theme-f.css
// static/css/theme-g.css
// static/css/theme-h.css
// static/dashboard_anonym.html
// static/dashboard_cb.html
// static/dashboard_citizen.html
// static/dashboard_company.html
// static/dashboard_gov.html
// static/dashboard_health.html
// static/data/entries_doctor.json
// static/data/immunizations.json
// static/data/medication.json
// static/data/patients.json
// static/entrance.html
// static/gov_citizens.html
// static/gov_currency_exchange.html
// static/gov_shares_exchange.html
// static/health_buy_medicament.html
// static/health_facility.html
// static/health_immunization_records.html
// static/health_medical_record.html
// static/health_medication_records.html
// static/health_patient.html
// static/i18n/site-en.json
// static/i18n/site-es.json
// static/img/QR.png
// static/img/Thumbs.db
// static/img/US.svg
// static/img/bg1.jpg
// static/img/bg10.jpg
// static/img/bg2.jpg
// static/img/bg3.jpg
// static/img/bg4.jpg
// static/img/bg5.jpg
// static/img/bg6.jpg
// static/img/bg7.jpg
// static/img/bg8.jpg
// static/img/bg9.jpg
// static/img/dummy.png
// static/img/lock-bg.jpg
// static/img/logo-single.png
// static/img/logo.png
// static/img/mb-sample.jpg
// static/img/mockup.png
// static/img/profile-bg.jpg
// static/img/radio_icon.png
// static/img/user/01.jpg
// static/img/user/02.jpg
// static/img/user/03.jpg
// static/img/user/04.jpg
// static/img/user/05.jpg
// static/img/user/06.jpg
// static/img/user/07.jpg
// static/img/user/08.jpg
// static/img/user/09.jpg
// static/img/user/10.jpg
// static/img/user/11.jpg
// static/img/user/12.jpg
// static/img/user/13.jpg
// static/img/user/Thumbs.db
// static/index.html
// static/install_step_0.html
// static/install_step_1.html
// static/js/app.js
// static/js/asn1hex-1.1.min.js
// static/js/base64.js
// static/js/clipboard.js
// static/js/crypto/asn1-1.0.min.js
// static/js/crypto/asn1hex-1.1.min.js
// static/js/crypto/crypto-1.1.min.js
// static/js/crypto/ecdsa-modified-1.0.min.js
// static/js/crypto/ecparam-1.0.min.js
// static/js/crypto/ext/cj/aes.js
// static/js/crypto/ext/cj/cryptojs-312-core-fix-min.js
// static/js/crypto/ext/cj/ec-patch-min.js
// static/js/crypto/ext/cj/md5_min.js
// static/js/crypto/ext/cj/sha1_min.js
// static/js/crypto/ext/cj/sha256_min.js
// static/js/crypto/ext/cj/x64-core_min.js
// static/js/crypto/ext/ec-min.js
// static/js/crypto/ext/ec-patch-min.js
// static/js/crypto/ext/jsbn-min.js
// static/js/crypto/ext/jsbn2-min.js
// static/js/crypto/ext/prng4-min.js
// static/js/crypto/ext/rng-min.js
// static/js/crypto/ext/yahoo-min.js
// static/js/datetime.js
// static/js/demo/demo-datatable.js
// static/js/demo/demo-flot.js
// static/js/demo/demo-forms.js
// static/js/demo/demo-jqcloud.js
// static/js/demo/demo-jqgrid.js
// static/js/demo/demo-nestable.js
// static/js/demo/demo-panels.js
// static/js/demo/demo-rtl.js
// static/js/demo/demo-search.js
// static/js/demo/demo-sortable.js
// static/js/demo/demo-upload.js
// static/js/demo/demo-vector-map.js
// static/js/demo/demo-wizard.js
// static/js/demo/demo-xeditable.js
// static/js/index.js
// static/js/jsbn.js
// static/js/jsbn2.js
// static/js/md5.js
// static/js/rsa.js
// static/js/rsa2.js
// static/js/rsapem-1.1.js
// static/js/rsasign-1.2.min.js
// static/js/send_to_net.js
// static/js/sha1.js
// static/js/sha256.js
// static/js/spin.js
// static/lang/1.ini
// static/lang/42.ini
// static/lang/en-us.all.json
// static/lang/locale_en-US.ini
// static/lang/locale_ru-RU.ini
// static/login.html
// static/menu.html
// static/modal_anonym.html
// static/modal_cb.html
// static/modal_citizen.html
// static/modal_company.html
// static/modal_gov.html
// static/modal_health.html
// static/pass.html
// static/sass/_colors.scss
// static/sass/_mixins.scss
// static/sass/style.scss
// static/signatures.html
// static/templates/login.html
// static/templates/modal.html
// static/test.html
// static/updating_blockchain.html
// static/vendor/Chart.js/Chart.js
// static/vendor/Flot/jquery.flot.categories.js
// static/vendor/Flot/jquery.flot.js
// static/vendor/Flot/jquery.flot.pie.js
// static/vendor/Flot/jquery.flot.resize.js
// static/vendor/Flot/jquery.flot.time.js
// static/vendor/animate.css/animate.min.css
// static/vendor/animo.js/animo.js
// static/vendor/blueimp-canvas-to-blob/js/canvas-to-blob.js
// static/vendor/blueimp-file-upload/css/jquery.fileupload.css
// static/vendor/blueimp-file-upload/img/loading.gif
// static/vendor/blueimp-file-upload/img/progressbar.gif
// static/vendor/blueimp-file-upload/js/jquery.fileupload-angular.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-audio.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-image.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-jquery-ui.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-process.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-ui.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-validate.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload-video.js
// static/vendor/blueimp-file-upload/js/jquery.fileupload.js
// static/vendor/blueimp-file-upload/js/jquery.iframe-transport.js
// static/vendor/blueimp-load-image/js/load-image.all.min.js
// static/vendor/blueimp-tmpl/js/tmpl.js
// static/vendor/bootstrap/dist/css/bootstrap.css
// static/vendor/bootstrap/dist/js/bootstrap.js
// static/vendor/bootstrap-filestyle/src/bootstrap-filestyle.js
// static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css
// static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js
// static/vendor/bootstrap-tour/build/css/bootstrap-tour-standalone.css
// static/vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js
// static/vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js
// static/vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js
// static/vendor/chartist/dist/chartist.js
// static/vendor/chartist/dist/chartist.min.css
// static/vendor/chosen_v1.2.0/chosen-sprite.png
// static/vendor/chosen_v1.2.0/chosen-sprite@2x.png
// static/vendor/chosen_v1.2.0/chosen.jquery.min.js
// static/vendor/chosen_v1.2.0/chosen.min.css
// static/vendor/cropper/dist/cropper.css
// static/vendor/cropper/dist/cropper.js
// static/vendor/d3/d3.min.js
// static/vendor/dataTables.fontAwesome/index.css
// static/vendor/datatables/media/css/dataTables.bootstrap.css
// static/vendor/datatables/media/images/Sorting icons.psd
// static/vendor/datatables/media/images/favicon.ico
// static/vendor/datatables/media/images/sort_asc.png
// static/vendor/datatables/media/images/sort_asc_disabled.png
// static/vendor/datatables/media/images/sort_both.png
// static/vendor/datatables/media/images/sort_desc.png
// static/vendor/datatables/media/images/sort_desc_disabled.png
// static/vendor/datatables/media/js/dataTables.bootstrap.js
// static/vendor/datatables/media/js/jquery.dataTables.min.js
// static/vendor/datatables-colvis/css/dataTables.colVis.css
// static/vendor/datatables-colvis/js/dataTables.colVis.js
// static/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css
// static/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js
// static/vendor/fastclick/lib/fastclick.js
// static/vendor/flatdoc/flatdoc.js
// static/vendor/flot-spline/js/jquery.flot.spline.min.js
// static/vendor/flot.tooltip/js/jquery.flot.tooltip.min.js
// static/vendor/fontawesome/css/font-awesome.min.css
// static/vendor/fontawesome/fonts/FontAwesome.otf
// static/vendor/fontawesome/fonts/fontawesome-webfont.eot
// static/vendor/fontawesome/fonts/fontawesome-webfont.svg
// static/vendor/fontawesome/fonts/fontawesome-webfont.ttf
// static/vendor/fontawesome/fonts/fontawesome-webfont.woff
// static/vendor/fontawesome/fonts/fontawesome-webfont.woff2
// static/vendor/fullcalendar/dist/fullcalendar.css
// static/vendor/fullcalendar/dist/fullcalendar.min.js
// static/vendor/fullcalendar/dist/gcal.js
// static/vendor/html.sortable/dist/html.sortable.js
// static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css
// static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js
// static/vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js
// static/vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js
// static/vendor/jQuery-Storage-API/jquery.storageapi.js
// static/vendor/jQuery-gMap/jquery.gmap.min.js
// static/vendor/jqcloud2/dist/jqcloud.css
// static/vendor/jqcloud2/dist/jqcloud.js
// static/vendor/jqgrid/css/ui.jqgrid.css
// static/vendor/jqgrid/js/i18n/grid.locale-en.js
// static/vendor/jqgrid/js/jquery.jqGrid.js
// static/vendor/jquery/dist/jquery.js
// static/vendor/jquery-classyloader/js/jquery.classyloader.min.js
// static/vendor/jquery-knob/js/jquery.knob.js
// static/vendor/jquery-localize-i18n/dist/jquery.localize.js
// static/vendor/jquery-ui/themes/smoothness/images/animated-overlay.gif
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_0_aaaaaa_40x100.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_75_ffffff_40x100.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_55_fbf9ee_1x400.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_65_ffffff_1x400.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_dadada_1x400.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_e6e6e6_1x400.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_95_fef1ec_1x400.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-bg_highlight-soft_75_cccccc_1x100.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-icons_222222_256x240.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-icons_2e83ff_256x240.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-icons_454545_256x240.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-icons_888888_256x240.png
// static/vendor/jquery-ui/themes/smoothness/images/ui-icons_cd0a0a_256x240.png
// static/vendor/jquery-ui/themes/smoothness/jquery-ui.css
// static/vendor/jquery-ui/themes/smoothness/jquery-ui.min.css
// static/vendor/jquery-ui/themes/smoothness/theme.css
// static/vendor/jquery-ui/ui/accordion.js
// static/vendor/jquery-ui/ui/autocomplete.js
// static/vendor/jquery-ui/ui/button.js
// static/vendor/jquery-ui/ui/core.js
// static/vendor/jquery-ui/ui/datepicker.js
// static/vendor/jquery-ui/ui/dialog.js
// static/vendor/jquery-ui/ui/draggable.js
// static/vendor/jquery-ui/ui/droppable.js
// static/vendor/jquery-ui/ui/effect-blind.js
// static/vendor/jquery-ui/ui/effect-bounce.js
// static/vendor/jquery-ui/ui/effect-clip.js
// static/vendor/jquery-ui/ui/effect-drop.js
// static/vendor/jquery-ui/ui/effect-explode.js
// static/vendor/jquery-ui/ui/effect-fade.js
// static/vendor/jquery-ui/ui/effect-fold.js
// static/vendor/jquery-ui/ui/effect-highlight.js
// static/vendor/jquery-ui/ui/effect-puff.js
// static/vendor/jquery-ui/ui/effect-pulsate.js
// static/vendor/jquery-ui/ui/effect-scale.js
// static/vendor/jquery-ui/ui/effect-shake.js
// static/vendor/jquery-ui/ui/effect-size.js
// static/vendor/jquery-ui/ui/effect-slide.js
// static/vendor/jquery-ui/ui/effect-transfer.js
// static/vendor/jquery-ui/ui/effect.js
// static/vendor/jquery-ui/ui/menu.js
// static/vendor/jquery-ui/ui/mouse.js
// static/vendor/jquery-ui/ui/position.js
// static/vendor/jquery-ui/ui/progressbar.js
// static/vendor/jquery-ui/ui/resizable.js
// static/vendor/jquery-ui/ui/selectable.js
// static/vendor/jquery-ui/ui/selectmenu.js
// static/vendor/jquery-ui/ui/slider.js
// static/vendor/jquery-ui/ui/sortable.js
// static/vendor/jquery-ui/ui/spinner.js
// static/vendor/jquery-ui/ui/tabs.js
// static/vendor/jquery-ui/ui/tooltip.js
// static/vendor/jquery-ui/ui/widget.js
// static/vendor/jquery-validation/dist/jquery.validate.js
// static/vendor/jquery.easing/js/jquery.easing.js
// static/vendor/jquery.easy-pie-chart/dist/jquery.easypiechart.js
// static/vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js
// static/vendor/jquery.steps/build/jquery.steps.js
// static/vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js
// static/vendor/loaders.css/loaders.css
// static/vendor/matchMedia/matchMedia.js
// static/vendor/mjolnic-bootstrap-colorpicker/dist/css/bootstrap-colorpicker.css
// static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha-horizontal.png
// static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha.png
// static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue-horizontal.png
// static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue.png
// static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/saturation.png
// static/vendor/mjolnic-bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js
// static/vendor/modernizr/modernizr.custom.js
// static/vendor/moment/min/moment-with-locales.min.js
// static/vendor/morris.js/morris.css
// static/vendor/morris.js/morris.js
// static/vendor/nestable/jquery.nestable.js
// static/vendor/parsleyjs/dist/parsley.min.js
// static/vendor/raphael/raphael.js
// static/vendor/rickshaw/rickshaw.js
// static/vendor/rickshaw/rickshaw.min.css
// static/vendor/screenfull/dist/screenfull.js
// static/vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js
// static/vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css
// static/vendor/select2/dist/css/select2.css
// static/vendor/select2/dist/js/select2.js
// static/vendor/select2-bootstrap-theme/dist/select2-bootstrap.css
// static/vendor/simple-line-icons/css/simple-line-icons.css
// static/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot
// static/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg
// static/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf
// static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff
// static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2
// static/vendor/skycons/skycons.js
// static/vendor/slimScroll/jquery.slimscroll.min.js
// static/vendor/sparkline/index.js
// static/vendor/spinkit/css/spinkit.css
// static/vendor/sweetalert/dist/sweetalert.css
// static/vendor/sweetalert/dist/sweetalert.min.js
// static/vendor/weather-icons/css/weather-icons-wind.min.css
// static/vendor/weather-icons/css/weather-icons.min.css
// static/vendor/weather-icons/font/weathericons-regular-webfont.eot
// static/vendor/weather-icons/font/weathericons-regular-webfont.svg
// static/vendor/weather-icons/font/weathericons-regular-webfont.ttf
// static/vendor/weather-icons/font/weathericons-regular-webfont.woff
// static/vendor/weather-icons/font/weathericons-regular-webfont.woff2
// static/vendor/whirl/dist/whirl.css
// static/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css
// static/vendor/x-editable/dist/bootstrap3-editable/img/clear.png
// static/vendor/x-editable/dist/bootstrap3-editable/img/loading.gif
// static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js
// static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.min.js
// DO NOT EDIT!

package static

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// static1block reads file data from disk. It returns an error on failure.
func static1block() (*asset, error) {
	path := "static/1block"
	name := "static/1block"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticAlert_successHtml reads file data from disk. It returns an error on failure.
func staticAlert_successHtml() (*asset, error) {
	path := "static/alert_success.html"
	name := "static/alert_success.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticAnonym_historyHtml reads file data from disk. It returns an error on failure.
func staticAnonym_historyHtml() (*asset, error) {
	path := "static/anonym_history.html"
	name := "static/anonym_history.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticAnonym_money_transferHtml reads file data from disk. It returns an error on failure.
func staticAnonym_money_transferHtml() (*asset, error) {
	path := "static/anonym_money_transfer.html"
	name := "static/anonym_money_transfer.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticChange_node_keyHtml reads file data from disk. It returns an error on failure.
func staticChange_node_keyHtml() (*asset, error) {
	path := "static/change_node_key.html"
	name := "static/change_node_key.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCitizen_bill_paymentHtml reads file data from disk. It returns an error on failure.
func staticCitizen_bill_paymentHtml() (*asset, error) {
	path := "static/citizen_bill_payment.html"
	name := "static/citizen_bill_payment.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCitizen_marriage_registrationHtml reads file data from disk. It returns an error on failure.
func staticCitizen_marriage_registrationHtml() (*asset, error) {
	path := "static/citizen_marriage_registration.html"
	name := "static/citizen_marriage_registration.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCitizen_propertyHtml reads file data from disk. It returns an error on failure.
func staticCitizen_propertyHtml() (*asset, error) {
	path := "static/citizen_property.html"
	name := "static/citizen_property.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCitizen_rule_detailsHtml reads file data from disk. It returns an error on failure.
func staticCitizen_rule_detailsHtml() (*asset, error) {
	path := "static/citizen_rule_details.html"
	name := "static/citizen_rule_details.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_application_purchaseHtml reads file data from disk. It returns an error on failure.
func staticCompany_application_purchaseHtml() (*asset, error) {
	path := "static/company_application_purchase.html"
	name := "static/company_application_purchase.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_contractHtml reads file data from disk. It returns an error on failure.
func staticCompany_contractHtml() (*asset, error) {
	path := "static/company_contract.html"
	name := "static/company_contract.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_currency_exchangeHtml reads file data from disk. It returns an error on failure.
func staticCompany_currency_exchangeHtml() (*asset, error) {
	path := "static/company_currency_exchange.html"
	name := "static/company_currency_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_new_goodHtml reads file data from disk. It returns an error on failure.
func staticCompany_new_goodHtml() (*asset, error) {
	path := "static/company_new_good.html"
	name := "static/company_new_good.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_new_itemHtml reads file data from disk. It returns an error on failure.
func staticCompany_new_itemHtml() (*asset, error) {
	path := "static/company_new_item.html"
	name := "static/company_new_item.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_offer_sellerHtml reads file data from disk. It returns an error on failure.
func staticCompany_offer_sellerHtml() (*asset, error) {
	path := "static/company_offer_seller.html"
	name := "static/company_offer_seller.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_offer_transportHtml reads file data from disk. It returns an error on failure.
func staticCompany_offer_transportHtml() (*asset, error) {
	path := "static/company_offer_transport.html"
	name := "static/company_offer_transport.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_select_transportHtml reads file data from disk. It returns an error on failure.
func staticCompany_select_transportHtml() (*asset, error) {
	path := "static/company_select_transport.html"
	name := "static/company_select_transport.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_sharesHtml reads file data from disk. It returns an error on failure.
func staticCompany_sharesHtml() (*asset, error) {
	path := "static/company_shares.html"
	name := "static/company_shares.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_shares_exchangeHtml reads file data from disk. It returns an error on failure.
func staticCompany_shares_exchangeHtml() (*asset, error) {
	path := "static/company_shares_exchange.html"
	name := "static/company_shares_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCompany_smart_contractsHtml reads file data from disk. It returns an error on failure.
func staticCompany_smart_contractsHtml() (*asset, error) {
	path := "static/company_smart_contracts.html"
	name := "static/company_smart_contracts.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssAppCss reads file data from disk. It returns an error on failure.
func staticCssAppCss() (*asset, error) {
	path := "static/css/app.css"
	name := "static/css/app.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticCssBootstrapCss() (*asset, error) {
	path := "static/css/bootstrap.css"
	name := "static/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssStyleCss reads file data from disk. It returns an error on failure.
func staticCssStyleCss() (*asset, error) {
	path := "static/css/style.css"
	name := "static/css/style.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeACss reads file data from disk. It returns an error on failure.
func staticCssThemeACss() (*asset, error) {
	path := "static/css/theme-a.css"
	name := "static/css/theme-a.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeBCss reads file data from disk. It returns an error on failure.
func staticCssThemeBCss() (*asset, error) {
	path := "static/css/theme-b.css"
	name := "static/css/theme-b.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeCCss reads file data from disk. It returns an error on failure.
func staticCssThemeCCss() (*asset, error) {
	path := "static/css/theme-c.css"
	name := "static/css/theme-c.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeDCss reads file data from disk. It returns an error on failure.
func staticCssThemeDCss() (*asset, error) {
	path := "static/css/theme-d.css"
	name := "static/css/theme-d.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeECss reads file data from disk. It returns an error on failure.
func staticCssThemeECss() (*asset, error) {
	path := "static/css/theme-e.css"
	name := "static/css/theme-e.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeFCss reads file data from disk. It returns an error on failure.
func staticCssThemeFCss() (*asset, error) {
	path := "static/css/theme-f.css"
	name := "static/css/theme-f.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeGCss reads file data from disk. It returns an error on failure.
func staticCssThemeGCss() (*asset, error) {
	path := "static/css/theme-g.css"
	name := "static/css/theme-g.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticCssThemeHCss reads file data from disk. It returns an error on failure.
func staticCssThemeHCss() (*asset, error) {
	path := "static/css/theme-h.css"
	name := "static/css/theme-h.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_anonymHtml reads file data from disk. It returns an error on failure.
func staticDashboard_anonymHtml() (*asset, error) {
	path := "static/dashboard_anonym.html"
	name := "static/dashboard_anonym.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_cbHtml reads file data from disk. It returns an error on failure.
func staticDashboard_cbHtml() (*asset, error) {
	path := "static/dashboard_cb.html"
	name := "static/dashboard_cb.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_citizenHtml reads file data from disk. It returns an error on failure.
func staticDashboard_citizenHtml() (*asset, error) {
	path := "static/dashboard_citizen.html"
	name := "static/dashboard_citizen.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_companyHtml reads file data from disk. It returns an error on failure.
func staticDashboard_companyHtml() (*asset, error) {
	path := "static/dashboard_company.html"
	name := "static/dashboard_company.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_govHtml reads file data from disk. It returns an error on failure.
func staticDashboard_govHtml() (*asset, error) {
	path := "static/dashboard_gov.html"
	name := "static/dashboard_gov.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDashboard_healthHtml reads file data from disk. It returns an error on failure.
func staticDashboard_healthHtml() (*asset, error) {
	path := "static/dashboard_health.html"
	name := "static/dashboard_health.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDataEntries_doctorJson reads file data from disk. It returns an error on failure.
func staticDataEntries_doctorJson() (*asset, error) {
	path := "static/data/entries_doctor.json"
	name := "static/data/entries_doctor.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDataImmunizationsJson reads file data from disk. It returns an error on failure.
func staticDataImmunizationsJson() (*asset, error) {
	path := "static/data/immunizations.json"
	name := "static/data/immunizations.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDataMedicationJson reads file data from disk. It returns an error on failure.
func staticDataMedicationJson() (*asset, error) {
	path := "static/data/medication.json"
	name := "static/data/medication.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticDataPatientsJson reads file data from disk. It returns an error on failure.
func staticDataPatientsJson() (*asset, error) {
	path := "static/data/patients.json"
	name := "static/data/patients.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticEntranceHtml reads file data from disk. It returns an error on failure.
func staticEntranceHtml() (*asset, error) {
	path := "static/entrance.html"
	name := "static/entrance.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticGov_citizensHtml reads file data from disk. It returns an error on failure.
func staticGov_citizensHtml() (*asset, error) {
	path := "static/gov_citizens.html"
	name := "static/gov_citizens.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticGov_currency_exchangeHtml reads file data from disk. It returns an error on failure.
func staticGov_currency_exchangeHtml() (*asset, error) {
	path := "static/gov_currency_exchange.html"
	name := "static/gov_currency_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticGov_shares_exchangeHtml reads file data from disk. It returns an error on failure.
func staticGov_shares_exchangeHtml() (*asset, error) {
	path := "static/gov_shares_exchange.html"
	name := "static/gov_shares_exchange.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_buy_medicamentHtml reads file data from disk. It returns an error on failure.
func staticHealth_buy_medicamentHtml() (*asset, error) {
	path := "static/health_buy_medicament.html"
	name := "static/health_buy_medicament.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_facilityHtml reads file data from disk. It returns an error on failure.
func staticHealth_facilityHtml() (*asset, error) {
	path := "static/health_facility.html"
	name := "static/health_facility.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_immunization_recordsHtml reads file data from disk. It returns an error on failure.
func staticHealth_immunization_recordsHtml() (*asset, error) {
	path := "static/health_immunization_records.html"
	name := "static/health_immunization_records.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_medical_recordHtml reads file data from disk. It returns an error on failure.
func staticHealth_medical_recordHtml() (*asset, error) {
	path := "static/health_medical_record.html"
	name := "static/health_medical_record.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_medication_recordsHtml reads file data from disk. It returns an error on failure.
func staticHealth_medication_recordsHtml() (*asset, error) {
	path := "static/health_medication_records.html"
	name := "static/health_medication_records.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticHealth_patientHtml reads file data from disk. It returns an error on failure.
func staticHealth_patientHtml() (*asset, error) {
	path := "static/health_patient.html"
	name := "static/health_patient.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticI18nSiteEnJson reads file data from disk. It returns an error on failure.
func staticI18nSiteEnJson() (*asset, error) {
	path := "static/i18n/site-en.json"
	name := "static/i18n/site-en.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticI18nSiteEsJson reads file data from disk. It returns an error on failure.
func staticI18nSiteEsJson() (*asset, error) {
	path := "static/i18n/site-es.json"
	name := "static/i18n/site-es.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgQrPng reads file data from disk. It returns an error on failure.
func staticImgQrPng() (*asset, error) {
	path := "static/img/QR.png"
	name := "static/img/QR.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgThumbsDb reads file data from disk. It returns an error on failure.
func staticImgThumbsDb() (*asset, error) {
	path := "static/img/Thumbs.db"
	name := "static/img/Thumbs.db"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUsSvg reads file data from disk. It returns an error on failure.
func staticImgUsSvg() (*asset, error) {
	path := "static/img/US.svg"
	name := "static/img/US.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg1Jpg reads file data from disk. It returns an error on failure.
func staticImgBg1Jpg() (*asset, error) {
	path := "static/img/bg1.jpg"
	name := "static/img/bg1.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg10Jpg reads file data from disk. It returns an error on failure.
func staticImgBg10Jpg() (*asset, error) {
	path := "static/img/bg10.jpg"
	name := "static/img/bg10.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg2Jpg reads file data from disk. It returns an error on failure.
func staticImgBg2Jpg() (*asset, error) {
	path := "static/img/bg2.jpg"
	name := "static/img/bg2.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg3Jpg reads file data from disk. It returns an error on failure.
func staticImgBg3Jpg() (*asset, error) {
	path := "static/img/bg3.jpg"
	name := "static/img/bg3.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg4Jpg reads file data from disk. It returns an error on failure.
func staticImgBg4Jpg() (*asset, error) {
	path := "static/img/bg4.jpg"
	name := "static/img/bg4.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg5Jpg reads file data from disk. It returns an error on failure.
func staticImgBg5Jpg() (*asset, error) {
	path := "static/img/bg5.jpg"
	name := "static/img/bg5.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg6Jpg reads file data from disk. It returns an error on failure.
func staticImgBg6Jpg() (*asset, error) {
	path := "static/img/bg6.jpg"
	name := "static/img/bg6.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg7Jpg reads file data from disk. It returns an error on failure.
func staticImgBg7Jpg() (*asset, error) {
	path := "static/img/bg7.jpg"
	name := "static/img/bg7.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg8Jpg reads file data from disk. It returns an error on failure.
func staticImgBg8Jpg() (*asset, error) {
	path := "static/img/bg8.jpg"
	name := "static/img/bg8.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgBg9Jpg reads file data from disk. It returns an error on failure.
func staticImgBg9Jpg() (*asset, error) {
	path := "static/img/bg9.jpg"
	name := "static/img/bg9.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgDummyPng reads file data from disk. It returns an error on failure.
func staticImgDummyPng() (*asset, error) {
	path := "static/img/dummy.png"
	name := "static/img/dummy.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLockBgJpg reads file data from disk. It returns an error on failure.
func staticImgLockBgJpg() (*asset, error) {
	path := "static/img/lock-bg.jpg"
	name := "static/img/lock-bg.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLogoSinglePng reads file data from disk. It returns an error on failure.
func staticImgLogoSinglePng() (*asset, error) {
	path := "static/img/logo-single.png"
	name := "static/img/logo-single.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgLogoPng reads file data from disk. It returns an error on failure.
func staticImgLogoPng() (*asset, error) {
	path := "static/img/logo.png"
	name := "static/img/logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgMbSampleJpg reads file data from disk. It returns an error on failure.
func staticImgMbSampleJpg() (*asset, error) {
	path := "static/img/mb-sample.jpg"
	name := "static/img/mb-sample.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgMockupPng reads file data from disk. It returns an error on failure.
func staticImgMockupPng() (*asset, error) {
	path := "static/img/mockup.png"
	name := "static/img/mockup.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgProfileBgJpg reads file data from disk. It returns an error on failure.
func staticImgProfileBgJpg() (*asset, error) {
	path := "static/img/profile-bg.jpg"
	name := "static/img/profile-bg.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgRadio_iconPng reads file data from disk. It returns an error on failure.
func staticImgRadio_iconPng() (*asset, error) {
	path := "static/img/radio_icon.png"
	name := "static/img/radio_icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser01Jpg reads file data from disk. It returns an error on failure.
func staticImgUser01Jpg() (*asset, error) {
	path := "static/img/user/01.jpg"
	name := "static/img/user/01.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser02Jpg reads file data from disk. It returns an error on failure.
func staticImgUser02Jpg() (*asset, error) {
	path := "static/img/user/02.jpg"
	name := "static/img/user/02.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser03Jpg reads file data from disk. It returns an error on failure.
func staticImgUser03Jpg() (*asset, error) {
	path := "static/img/user/03.jpg"
	name := "static/img/user/03.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser04Jpg reads file data from disk. It returns an error on failure.
func staticImgUser04Jpg() (*asset, error) {
	path := "static/img/user/04.jpg"
	name := "static/img/user/04.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser05Jpg reads file data from disk. It returns an error on failure.
func staticImgUser05Jpg() (*asset, error) {
	path := "static/img/user/05.jpg"
	name := "static/img/user/05.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser06Jpg reads file data from disk. It returns an error on failure.
func staticImgUser06Jpg() (*asset, error) {
	path := "static/img/user/06.jpg"
	name := "static/img/user/06.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser07Jpg reads file data from disk. It returns an error on failure.
func staticImgUser07Jpg() (*asset, error) {
	path := "static/img/user/07.jpg"
	name := "static/img/user/07.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser08Jpg reads file data from disk. It returns an error on failure.
func staticImgUser08Jpg() (*asset, error) {
	path := "static/img/user/08.jpg"
	name := "static/img/user/08.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser09Jpg reads file data from disk. It returns an error on failure.
func staticImgUser09Jpg() (*asset, error) {
	path := "static/img/user/09.jpg"
	name := "static/img/user/09.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser10Jpg reads file data from disk. It returns an error on failure.
func staticImgUser10Jpg() (*asset, error) {
	path := "static/img/user/10.jpg"
	name := "static/img/user/10.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser11Jpg reads file data from disk. It returns an error on failure.
func staticImgUser11Jpg() (*asset, error) {
	path := "static/img/user/11.jpg"
	name := "static/img/user/11.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser12Jpg reads file data from disk. It returns an error on failure.
func staticImgUser12Jpg() (*asset, error) {
	path := "static/img/user/12.jpg"
	name := "static/img/user/12.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUser13Jpg reads file data from disk. It returns an error on failure.
func staticImgUser13Jpg() (*asset, error) {
	path := "static/img/user/13.jpg"
	name := "static/img/user/13.jpg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticImgUserThumbsDb reads file data from disk. It returns an error on failure.
func staticImgUserThumbsDb() (*asset, error) {
	path := "static/img/user/Thumbs.db"
	name := "static/img/user/Thumbs.db"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticIndexHtml reads file data from disk. It returns an error on failure.
func staticIndexHtml() (*asset, error) {
	path := "static/index.html"
	name := "static/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticInstall_step_0Html reads file data from disk. It returns an error on failure.
func staticInstall_step_0Html() (*asset, error) {
	path := "static/install_step_0.html"
	name := "static/install_step_0.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticInstall_step_1Html reads file data from disk. It returns an error on failure.
func staticInstall_step_1Html() (*asset, error) {
	path := "static/install_step_1.html"
	name := "static/install_step_1.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAppJs reads file data from disk. It returns an error on failure.
func staticJsAppJs() (*asset, error) {
	path := "static/js/app.js"
	name := "static/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsAsn1hex11MinJs reads file data from disk. It returns an error on failure.
func staticJsAsn1hex11MinJs() (*asset, error) {
	path := "static/js/asn1hex-1.1.min.js"
	name := "static/js/asn1hex-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsBase64Js reads file data from disk. It returns an error on failure.
func staticJsBase64Js() (*asset, error) {
	path := "static/js/base64.js"
	name := "static/js/base64.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsClipboardJs reads file data from disk. It returns an error on failure.
func staticJsClipboardJs() (*asset, error) {
	path := "static/js/clipboard.js"
	name := "static/js/clipboard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoAsn110MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoAsn110MinJs() (*asset, error) {
	path := "static/js/crypto/asn1-1.0.min.js"
	name := "static/js/crypto/asn1-1.0.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoAsn1hex11MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoAsn1hex11MinJs() (*asset, error) {
	path := "static/js/crypto/asn1hex-1.1.min.js"
	name := "static/js/crypto/asn1hex-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoCrypto11MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoCrypto11MinJs() (*asset, error) {
	path := "static/js/crypto/crypto-1.1.min.js"
	name := "static/js/crypto/crypto-1.1.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoEcdsaModified10MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoEcdsaModified10MinJs() (*asset, error) {
	path := "static/js/crypto/ecdsa-modified-1.0.min.js"
	name := "static/js/crypto/ecdsa-modified-1.0.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoEcparam10MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoEcparam10MinJs() (*asset, error) {
	path := "static/js/crypto/ecparam-1.0.min.js"
	name := "static/js/crypto/ecparam-1.0.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjAesJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjAesJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/aes.js"
	name := "static/js/crypto/ext/cj/aes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjCryptojs312CoreFixMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjCryptojs312CoreFixMinJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/cryptojs-312-core-fix-min.js"
	name := "static/js/crypto/ext/cj/cryptojs-312-core-fix-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjEcPatchMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjEcPatchMinJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/ec-patch-min.js"
	name := "static/js/crypto/ext/cj/ec-patch-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjMd5_minJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjMd5_minJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/md5_min.js"
	name := "static/js/crypto/ext/cj/md5_min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjSha1_minJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjSha1_minJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/sha1_min.js"
	name := "static/js/crypto/ext/cj/sha1_min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjSha256_minJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjSha256_minJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/sha256_min.js"
	name := "static/js/crypto/ext/cj/sha256_min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtCjX64Core_minJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtCjX64Core_minJs() (*asset, error) {
	path := "static/js/crypto/ext/cj/x64-core_min.js"
	name := "static/js/crypto/ext/cj/x64-core_min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtEcMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtEcMinJs() (*asset, error) {
	path := "static/js/crypto/ext/ec-min.js"
	name := "static/js/crypto/ext/ec-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtEcPatchMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtEcPatchMinJs() (*asset, error) {
	path := "static/js/crypto/ext/ec-patch-min.js"
	name := "static/js/crypto/ext/ec-patch-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtJsbnMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtJsbnMinJs() (*asset, error) {
	path := "static/js/crypto/ext/jsbn-min.js"
	name := "static/js/crypto/ext/jsbn-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtJsbn2MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtJsbn2MinJs() (*asset, error) {
	path := "static/js/crypto/ext/jsbn2-min.js"
	name := "static/js/crypto/ext/jsbn2-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtPrng4MinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtPrng4MinJs() (*asset, error) {
	path := "static/js/crypto/ext/prng4-min.js"
	name := "static/js/crypto/ext/prng4-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtRngMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtRngMinJs() (*asset, error) {
	path := "static/js/crypto/ext/rng-min.js"
	name := "static/js/crypto/ext/rng-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsCryptoExtYahooMinJs reads file data from disk. It returns an error on failure.
func staticJsCryptoExtYahooMinJs() (*asset, error) {
	path := "static/js/crypto/ext/yahoo-min.js"
	name := "static/js/crypto/ext/yahoo-min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDatetimeJs reads file data from disk. It returns an error on failure.
func staticJsDatetimeJs() (*asset, error) {
	path := "static/js/datetime.js"
	name := "static/js/datetime.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoDatatableJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoDatatableJs() (*asset, error) {
	path := "static/js/demo/demo-datatable.js"
	name := "static/js/demo/demo-datatable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoFlotJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoFlotJs() (*asset, error) {
	path := "static/js/demo/demo-flot.js"
	name := "static/js/demo/demo-flot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoFormsJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoFormsJs() (*asset, error) {
	path := "static/js/demo/demo-forms.js"
	name := "static/js/demo/demo-forms.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoJqcloudJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoJqcloudJs() (*asset, error) {
	path := "static/js/demo/demo-jqcloud.js"
	name := "static/js/demo/demo-jqcloud.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoJqgridJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoJqgridJs() (*asset, error) {
	path := "static/js/demo/demo-jqgrid.js"
	name := "static/js/demo/demo-jqgrid.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoNestableJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoNestableJs() (*asset, error) {
	path := "static/js/demo/demo-nestable.js"
	name := "static/js/demo/demo-nestable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoPanelsJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoPanelsJs() (*asset, error) {
	path := "static/js/demo/demo-panels.js"
	name := "static/js/demo/demo-panels.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoRtlJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoRtlJs() (*asset, error) {
	path := "static/js/demo/demo-rtl.js"
	name := "static/js/demo/demo-rtl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoSearchJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoSearchJs() (*asset, error) {
	path := "static/js/demo/demo-search.js"
	name := "static/js/demo/demo-search.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoSortableJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoSortableJs() (*asset, error) {
	path := "static/js/demo/demo-sortable.js"
	name := "static/js/demo/demo-sortable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoUploadJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoUploadJs() (*asset, error) {
	path := "static/js/demo/demo-upload.js"
	name := "static/js/demo/demo-upload.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoVectorMapJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoVectorMapJs() (*asset, error) {
	path := "static/js/demo/demo-vector-map.js"
	name := "static/js/demo/demo-vector-map.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoWizardJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoWizardJs() (*asset, error) {
	path := "static/js/demo/demo-wizard.js"
	name := "static/js/demo/demo-wizard.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsDemoDemoXeditableJs reads file data from disk. It returns an error on failure.
func staticJsDemoDemoXeditableJs() (*asset, error) {
	path := "static/js/demo/demo-xeditable.js"
	name := "static/js/demo/demo-xeditable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsIndexJs reads file data from disk. It returns an error on failure.
func staticJsIndexJs() (*asset, error) {
	path := "static/js/index.js"
	name := "static/js/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsbnJs reads file data from disk. It returns an error on failure.
func staticJsJsbnJs() (*asset, error) {
	path := "static/js/jsbn.js"
	name := "static/js/jsbn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsJsbn2Js reads file data from disk. It returns an error on failure.
func staticJsJsbn2Js() (*asset, error) {
	path := "static/js/jsbn2.js"
	name := "static/js/jsbn2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsMd5Js reads file data from disk. It returns an error on failure.
func staticJsMd5Js() (*asset, error) {
	path := "static/js/md5.js"
	name := "static/js/md5.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsaJs reads file data from disk. It returns an error on failure.
func staticJsRsaJs() (*asset, error) {
	path := "static/js/rsa.js"
	name := "static/js/rsa.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsa2Js reads file data from disk. It returns an error on failure.
func staticJsRsa2Js() (*asset, error) {
	path := "static/js/rsa2.js"
	name := "static/js/rsa2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsapem11Js reads file data from disk. It returns an error on failure.
func staticJsRsapem11Js() (*asset, error) {
	path := "static/js/rsapem-1.1.js"
	name := "static/js/rsapem-1.1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsRsasign12MinJs reads file data from disk. It returns an error on failure.
func staticJsRsasign12MinJs() (*asset, error) {
	path := "static/js/rsasign-1.2.min.js"
	name := "static/js/rsasign-1.2.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSend_to_netJs reads file data from disk. It returns an error on failure.
func staticJsSend_to_netJs() (*asset, error) {
	path := "static/js/send_to_net.js"
	name := "static/js/send_to_net.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSha1Js reads file data from disk. It returns an error on failure.
func staticJsSha1Js() (*asset, error) {
	path := "static/js/sha1.js"
	name := "static/js/sha1.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSha256Js reads file data from disk. It returns an error on failure.
func staticJsSha256Js() (*asset, error) {
	path := "static/js/sha256.js"
	name := "static/js/sha256.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticJsSpinJs reads file data from disk. It returns an error on failure.
func staticJsSpinJs() (*asset, error) {
	path := "static/js/spin.js"
	name := "static/js/spin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLang1Ini reads file data from disk. It returns an error on failure.
func staticLang1Ini() (*asset, error) {
	path := "static/lang/1.ini"
	name := "static/lang/1.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLang42Ini reads file data from disk. It returns an error on failure.
func staticLang42Ini() (*asset, error) {
	path := "static/lang/42.ini"
	name := "static/lang/42.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangEnUsAllJson reads file data from disk. It returns an error on failure.
func staticLangEnUsAllJson() (*asset, error) {
	path := "static/lang/en-us.all.json"
	name := "static/lang/en-us.all.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangLocale_enUsIni reads file data from disk. It returns an error on failure.
func staticLangLocale_enUsIni() (*asset, error) {
	path := "static/lang/locale_en-US.ini"
	name := "static/lang/locale_en-US.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLangLocale_ruRuIni reads file data from disk. It returns an error on failure.
func staticLangLocale_ruRuIni() (*asset, error) {
	path := "static/lang/locale_ru-RU.ini"
	name := "static/lang/locale_ru-RU.ini"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticLoginHtml reads file data from disk. It returns an error on failure.
func staticLoginHtml() (*asset, error) {
	path := "static/login.html"
	name := "static/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticMenuHtml reads file data from disk. It returns an error on failure.
func staticMenuHtml() (*asset, error) {
	path := "static/menu.html"
	name := "static/menu.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_anonymHtml reads file data from disk. It returns an error on failure.
func staticModal_anonymHtml() (*asset, error) {
	path := "static/modal_anonym.html"
	name := "static/modal_anonym.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_cbHtml reads file data from disk. It returns an error on failure.
func staticModal_cbHtml() (*asset, error) {
	path := "static/modal_cb.html"
	name := "static/modal_cb.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_citizenHtml reads file data from disk. It returns an error on failure.
func staticModal_citizenHtml() (*asset, error) {
	path := "static/modal_citizen.html"
	name := "static/modal_citizen.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_companyHtml reads file data from disk. It returns an error on failure.
func staticModal_companyHtml() (*asset, error) {
	path := "static/modal_company.html"
	name := "static/modal_company.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_govHtml reads file data from disk. It returns an error on failure.
func staticModal_govHtml() (*asset, error) {
	path := "static/modal_gov.html"
	name := "static/modal_gov.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticModal_healthHtml reads file data from disk. It returns an error on failure.
func staticModal_healthHtml() (*asset, error) {
	path := "static/modal_health.html"
	name := "static/modal_health.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticPassHtml reads file data from disk. It returns an error on failure.
func staticPassHtml() (*asset, error) {
	path := "static/pass.html"
	name := "static/pass.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSass_colorsScss reads file data from disk. It returns an error on failure.
func staticSass_colorsScss() (*asset, error) {
	path := "static/sass/_colors.scss"
	name := "static/sass/_colors.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSass_mixinsScss reads file data from disk. It returns an error on failure.
func staticSass_mixinsScss() (*asset, error) {
	path := "static/sass/_mixins.scss"
	name := "static/sass/_mixins.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSassStyleScss reads file data from disk. It returns an error on failure.
func staticSassStyleScss() (*asset, error) {
	path := "static/sass/style.scss"
	name := "static/sass/style.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticSignaturesHtml reads file data from disk. It returns an error on failure.
func staticSignaturesHtml() (*asset, error) {
	path := "static/signatures.html"
	name := "static/signatures.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesLoginHtml reads file data from disk. It returns an error on failure.
func staticTemplatesLoginHtml() (*asset, error) {
	path := "static/templates/login.html"
	name := "static/templates/login.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTemplatesModalHtml reads file data from disk. It returns an error on failure.
func staticTemplatesModalHtml() (*asset, error) {
	path := "static/templates/modal.html"
	name := "static/templates/modal.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticTestHtml reads file data from disk. It returns an error on failure.
func staticTestHtml() (*asset, error) {
	path := "static/test.html"
	name := "static/test.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticUpdating_blockchainHtml reads file data from disk. It returns an error on failure.
func staticUpdating_blockchainHtml() (*asset, error) {
	path := "static/updating_blockchain.html"
	name := "static/updating_blockchain.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChartJsChartJs reads file data from disk. It returns an error on failure.
func staticVendorChartJsChartJs() (*asset, error) {
	path := "static/vendor/Chart.js/Chart.js"
	name := "static/vendor/Chart.js/Chart.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotJqueryFlotCategoriesJs reads file data from disk. It returns an error on failure.
func staticVendorFlotJqueryFlotCategoriesJs() (*asset, error) {
	path := "static/vendor/Flot/jquery.flot.categories.js"
	name := "static/vendor/Flot/jquery.flot.categories.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotJqueryFlotJs reads file data from disk. It returns an error on failure.
func staticVendorFlotJqueryFlotJs() (*asset, error) {
	path := "static/vendor/Flot/jquery.flot.js"
	name := "static/vendor/Flot/jquery.flot.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotJqueryFlotPieJs reads file data from disk. It returns an error on failure.
func staticVendorFlotJqueryFlotPieJs() (*asset, error) {
	path := "static/vendor/Flot/jquery.flot.pie.js"
	name := "static/vendor/Flot/jquery.flot.pie.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotJqueryFlotResizeJs reads file data from disk. It returns an error on failure.
func staticVendorFlotJqueryFlotResizeJs() (*asset, error) {
	path := "static/vendor/Flot/jquery.flot.resize.js"
	name := "static/vendor/Flot/jquery.flot.resize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotJqueryFlotTimeJs reads file data from disk. It returns an error on failure.
func staticVendorFlotJqueryFlotTimeJs() (*asset, error) {
	path := "static/vendor/Flot/jquery.flot.time.js"
	name := "static/vendor/Flot/jquery.flot.time.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorAnimateCssAnimateMinCss reads file data from disk. It returns an error on failure.
func staticVendorAnimateCssAnimateMinCss() (*asset, error) {
	path := "static/vendor/animate.css/animate.min.css"
	name := "static/vendor/animate.css/animate.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorAnimoJsAnimoJs reads file data from disk. It returns an error on failure.
func staticVendorAnimoJsAnimoJs() (*asset, error) {
	path := "static/vendor/animo.js/animo.js"
	name := "static/vendor/animo.js/animo.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpCanvasToBlobJsCanvasToBlobJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpCanvasToBlobJsCanvasToBlobJs() (*asset, error) {
	path := "static/vendor/blueimp-canvas-to-blob/js/canvas-to-blob.js"
	name := "static/vendor/blueimp-canvas-to-blob/js/canvas-to-blob.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadCssJqueryFileuploadCss reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadCssJqueryFileuploadCss() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/css/jquery.fileupload.css"
	name := "static/vendor/blueimp-file-upload/css/jquery.fileupload.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadImgLoadingGif reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadImgLoadingGif() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/img/loading.gif"
	name := "static/vendor/blueimp-file-upload/img/loading.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadImgProgressbarGif reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadImgProgressbarGif() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/img/progressbar.gif"
	name := "static/vendor/blueimp-file-upload/img/progressbar.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadAngularJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadAngularJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-angular.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-angular.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadAudioJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadAudioJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-audio.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-audio.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadImageJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadImageJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-image.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-image.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadJqueryUiJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadJqueryUiJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-jquery-ui.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-jquery-ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadProcessJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadProcessJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-process.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-process.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadUiJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadUiJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-ui.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadValidateJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadValidateJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-validate.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-validate.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadVideoJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadVideoJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload-video.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload-video.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryFileuploadJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryFileuploadJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.fileupload.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.fileupload.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpFileUploadJsJqueryIframeTransportJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpFileUploadJsJqueryIframeTransportJs() (*asset, error) {
	path := "static/vendor/blueimp-file-upload/js/jquery.iframe-transport.js"
	name := "static/vendor/blueimp-file-upload/js/jquery.iframe-transport.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpLoadImageJsLoadImageAllMinJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpLoadImageJsLoadImageAllMinJs() (*asset, error) {
	path := "static/vendor/blueimp-load-image/js/load-image.all.min.js"
	name := "static/vendor/blueimp-load-image/js/load-image.all.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBlueimpTmplJsTmplJs reads file data from disk. It returns an error on failure.
func staticVendorBlueimpTmplJsTmplJs() (*asset, error) {
	path := "static/vendor/blueimp-tmpl/js/tmpl.js"
	name := "static/vendor/blueimp-tmpl/js/tmpl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapDistCssBootstrapCss reads file data from disk. It returns an error on failure.
func staticVendorBootstrapDistCssBootstrapCss() (*asset, error) {
	path := "static/vendor/bootstrap/dist/css/bootstrap.css"
	name := "static/vendor/bootstrap/dist/css/bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapDistJsBootstrapJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapDistJsBootstrapJs() (*asset, error) {
	path := "static/vendor/bootstrap/dist/js/bootstrap.js"
	name := "static/vendor/bootstrap/dist/js/bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapFilestyleSrcBootstrapFilestyleJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapFilestyleSrcBootstrapFilestyleJs() (*asset, error) {
	path := "static/vendor/bootstrap-filestyle/src/bootstrap-filestyle.js"
	name := "static/vendor/bootstrap-filestyle/src/bootstrap-filestyle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapTagsinputDistBootstrapTagsinputCss reads file data from disk. It returns an error on failure.
func staticVendorBootstrapTagsinputDistBootstrapTagsinputCss() (*asset, error) {
	path := "static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css"
	name := "static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapTagsinputDistBootstrapTagsinputMinJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapTagsinputDistBootstrapTagsinputMinJs() (*asset, error) {
	path := "static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"
	name := "static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapTourBuildCssBootstrapTourStandaloneCss reads file data from disk. It returns an error on failure.
func staticVendorBootstrapTourBuildCssBootstrapTourStandaloneCss() (*asset, error) {
	path := "static/vendor/bootstrap-tour/build/css/bootstrap-tour-standalone.css"
	name := "static/vendor/bootstrap-tour/build/css/bootstrap-tour-standalone.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapTourBuildJsBootstrapTourStandaloneJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapTourBuildJsBootstrapTourStandaloneJs() (*asset, error) {
	path := "static/vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js"
	name := "static/vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapWysiwygBootstrapWysiwygJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapWysiwygBootstrapWysiwygJs() (*asset, error) {
	path := "static/vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js"
	name := "static/vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorBootstrapWysiwygExternalJqueryHotkeysJs reads file data from disk. It returns an error on failure.
func staticVendorBootstrapWysiwygExternalJqueryHotkeysJs() (*asset, error) {
	path := "static/vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js"
	name := "static/vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChartistDistChartistJs reads file data from disk. It returns an error on failure.
func staticVendorChartistDistChartistJs() (*asset, error) {
	path := "static/vendor/chartist/dist/chartist.js"
	name := "static/vendor/chartist/dist/chartist.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChartistDistChartistMinCss reads file data from disk. It returns an error on failure.
func staticVendorChartistDistChartistMinCss() (*asset, error) {
	path := "static/vendor/chartist/dist/chartist.min.css"
	name := "static/vendor/chartist/dist/chartist.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChosen_v120ChosenSpritePng reads file data from disk. It returns an error on failure.
func staticVendorChosen_v120ChosenSpritePng() (*asset, error) {
	path := "static/vendor/chosen_v1.2.0/chosen-sprite.png"
	name := "static/vendor/chosen_v1.2.0/chosen-sprite.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChosen_v120ChosenSprite2xPng reads file data from disk. It returns an error on failure.
func staticVendorChosen_v120ChosenSprite2xPng() (*asset, error) {
	path := "static/vendor/chosen_v1.2.0/chosen-sprite@2x.png"
	name := "static/vendor/chosen_v1.2.0/chosen-sprite@2x.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChosen_v120ChosenJqueryMinJs reads file data from disk. It returns an error on failure.
func staticVendorChosen_v120ChosenJqueryMinJs() (*asset, error) {
	path := "static/vendor/chosen_v1.2.0/chosen.jquery.min.js"
	name := "static/vendor/chosen_v1.2.0/chosen.jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorChosen_v120ChosenMinCss reads file data from disk. It returns an error on failure.
func staticVendorChosen_v120ChosenMinCss() (*asset, error) {
	path := "static/vendor/chosen_v1.2.0/chosen.min.css"
	name := "static/vendor/chosen_v1.2.0/chosen.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorCropperDistCropperCss reads file data from disk. It returns an error on failure.
func staticVendorCropperDistCropperCss() (*asset, error) {
	path := "static/vendor/cropper/dist/cropper.css"
	name := "static/vendor/cropper/dist/cropper.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorCropperDistCropperJs reads file data from disk. It returns an error on failure.
func staticVendorCropperDistCropperJs() (*asset, error) {
	path := "static/vendor/cropper/dist/cropper.js"
	name := "static/vendor/cropper/dist/cropper.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorD3D3MinJs reads file data from disk. It returns an error on failure.
func staticVendorD3D3MinJs() (*asset, error) {
	path := "static/vendor/d3/d3.min.js"
	name := "static/vendor/d3/d3.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesFontawesomeIndexCss reads file data from disk. It returns an error on failure.
func staticVendorDatatablesFontawesomeIndexCss() (*asset, error) {
	path := "static/vendor/dataTables.fontAwesome/index.css"
	name := "static/vendor/dataTables.fontAwesome/index.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaCssDatatablesBootstrapCss reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaCssDatatablesBootstrapCss() (*asset, error) {
	path := "static/vendor/datatables/media/css/dataTables.bootstrap.css"
	name := "static/vendor/datatables/media/css/dataTables.bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSortingIconsPsd reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSortingIconsPsd() (*asset, error) {
	path := "static/vendor/datatables/media/images/Sorting icons.psd"
	name := "static/vendor/datatables/media/images/Sorting icons.psd"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesFaviconIco reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesFaviconIco() (*asset, error) {
	path := "static/vendor/datatables/media/images/favicon.ico"
	name := "static/vendor/datatables/media/images/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSort_ascPng reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSort_ascPng() (*asset, error) {
	path := "static/vendor/datatables/media/images/sort_asc.png"
	name := "static/vendor/datatables/media/images/sort_asc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSort_asc_disabledPng reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSort_asc_disabledPng() (*asset, error) {
	path := "static/vendor/datatables/media/images/sort_asc_disabled.png"
	name := "static/vendor/datatables/media/images/sort_asc_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSort_bothPng reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSort_bothPng() (*asset, error) {
	path := "static/vendor/datatables/media/images/sort_both.png"
	name := "static/vendor/datatables/media/images/sort_both.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSort_descPng reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSort_descPng() (*asset, error) {
	path := "static/vendor/datatables/media/images/sort_desc.png"
	name := "static/vendor/datatables/media/images/sort_desc.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaImagesSort_desc_disabledPng reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaImagesSort_desc_disabledPng() (*asset, error) {
	path := "static/vendor/datatables/media/images/sort_desc_disabled.png"
	name := "static/vendor/datatables/media/images/sort_desc_disabled.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaJsDatatablesBootstrapJs reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaJsDatatablesBootstrapJs() (*asset, error) {
	path := "static/vendor/datatables/media/js/dataTables.bootstrap.js"
	name := "static/vendor/datatables/media/js/dataTables.bootstrap.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesMediaJsJqueryDatatablesMinJs reads file data from disk. It returns an error on failure.
func staticVendorDatatablesMediaJsJqueryDatatablesMinJs() (*asset, error) {
	path := "static/vendor/datatables/media/js/jquery.dataTables.min.js"
	name := "static/vendor/datatables/media/js/jquery.dataTables.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesColvisCssDatatablesColvisCss reads file data from disk. It returns an error on failure.
func staticVendorDatatablesColvisCssDatatablesColvisCss() (*asset, error) {
	path := "static/vendor/datatables-colvis/css/dataTables.colVis.css"
	name := "static/vendor/datatables-colvis/css/dataTables.colVis.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorDatatablesColvisJsDatatablesColvisJs reads file data from disk. It returns an error on failure.
func staticVendorDatatablesColvisJsDatatablesColvisJs() (*asset, error) {
	path := "static/vendor/datatables-colvis/js/dataTables.colVis.js"
	name := "static/vendor/datatables-colvis/js/dataTables.colVis.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorEonasdanBootstrapDatetimepickerBuildCssBootstrapDatetimepickerMinCss reads file data from disk. It returns an error on failure.
func staticVendorEonasdanBootstrapDatetimepickerBuildCssBootstrapDatetimepickerMinCss() (*asset, error) {
	path := "static/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css"
	name := "static/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorEonasdanBootstrapDatetimepickerBuildJsBootstrapDatetimepickerMinJs reads file data from disk. It returns an error on failure.
func staticVendorEonasdanBootstrapDatetimepickerBuildJsBootstrapDatetimepickerMinJs() (*asset, error) {
	path := "static/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"
	name := "static/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFastclickLibFastclickJs reads file data from disk. It returns an error on failure.
func staticVendorFastclickLibFastclickJs() (*asset, error) {
	path := "static/vendor/fastclick/lib/fastclick.js"
	name := "static/vendor/fastclick/lib/fastclick.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlatdocFlatdocJs reads file data from disk. It returns an error on failure.
func staticVendorFlatdocFlatdocJs() (*asset, error) {
	path := "static/vendor/flatdoc/flatdoc.js"
	name := "static/vendor/flatdoc/flatdoc.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotSplineJsJqueryFlotSplineMinJs reads file data from disk. It returns an error on failure.
func staticVendorFlotSplineJsJqueryFlotSplineMinJs() (*asset, error) {
	path := "static/vendor/flot-spline/js/jquery.flot.spline.min.js"
	name := "static/vendor/flot-spline/js/jquery.flot.spline.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFlotTooltipJsJqueryFlotTooltipMinJs reads file data from disk. It returns an error on failure.
func staticVendorFlotTooltipJsJqueryFlotTooltipMinJs() (*asset, error) {
	path := "static/vendor/flot.tooltip/js/jquery.flot.tooltip.min.js"
	name := "static/vendor/flot.tooltip/js/jquery.flot.tooltip.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeCssFontAwesomeMinCss reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeCssFontAwesomeMinCss() (*asset, error) {
	path := "static/vendor/fontawesome/css/font-awesome.min.css"
	name := "static/vendor/fontawesome/css/font-awesome.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeOtf reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeOtf() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/FontAwesome.otf"
	name := "static/vendor/fontawesome/fonts/FontAwesome.otf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeWebfontEot reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeWebfontEot() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/fontawesome-webfont.eot"
	name := "static/vendor/fontawesome/fonts/fontawesome-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeWebfontSvg reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeWebfontSvg() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/fontawesome-webfont.svg"
	name := "static/vendor/fontawesome/fonts/fontawesome-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeWebfontTtf reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeWebfontTtf() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/fontawesome-webfont.ttf"
	name := "static/vendor/fontawesome/fonts/fontawesome-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeWebfontWoff reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeWebfontWoff() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/fontawesome-webfont.woff"
	name := "static/vendor/fontawesome/fonts/fontawesome-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFontawesomeFontsFontawesomeWebfontWoff2 reads file data from disk. It returns an error on failure.
func staticVendorFontawesomeFontsFontawesomeWebfontWoff2() (*asset, error) {
	path := "static/vendor/fontawesome/fonts/fontawesome-webfont.woff2"
	name := "static/vendor/fontawesome/fonts/fontawesome-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFullcalendarDistFullcalendarCss reads file data from disk. It returns an error on failure.
func staticVendorFullcalendarDistFullcalendarCss() (*asset, error) {
	path := "static/vendor/fullcalendar/dist/fullcalendar.css"
	name := "static/vendor/fullcalendar/dist/fullcalendar.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFullcalendarDistFullcalendarMinJs reads file data from disk. It returns an error on failure.
func staticVendorFullcalendarDistFullcalendarMinJs() (*asset, error) {
	path := "static/vendor/fullcalendar/dist/fullcalendar.min.js"
	name := "static/vendor/fullcalendar/dist/fullcalendar.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorFullcalendarDistGcalJs reads file data from disk. It returns an error on failure.
func staticVendorFullcalendarDistGcalJs() (*asset, error) {
	path := "static/vendor/fullcalendar/dist/gcal.js"
	name := "static/vendor/fullcalendar/dist/gcal.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorHtmlSortableDistHtmlSortableJs reads file data from disk. It returns an error on failure.
func staticVendorHtmlSortableDistHtmlSortableJs() (*asset, error) {
	path := "static/vendor/html.sortable/dist/html.sortable.js"
	name := "static/vendor/html.sortable/dist/html.sortable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorIkaJvectormapJqueryJvectormap122Css reads file data from disk. It returns an error on failure.
func staticVendorIkaJvectormapJqueryJvectormap122Css() (*asset, error) {
	path := "static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css"
	name := "static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorIkaJvectormapJqueryJvectormap122MinJs reads file data from disk. It returns an error on failure.
func staticVendorIkaJvectormapJqueryJvectormap122MinJs() (*asset, error) {
	path := "static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js"
	name := "static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorIkaJvectormapJqueryJvectormapUsMillEnJs reads file data from disk. It returns an error on failure.
func staticVendorIkaJvectormapJqueryJvectormapUsMillEnJs() (*asset, error) {
	path := "static/vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js"
	name := "static/vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorIkaJvectormapJqueryJvectormapWorldMillEnJs reads file data from disk. It returns an error on failure.
func staticVendorIkaJvectormapJqueryJvectormapWorldMillEnJs() (*asset, error) {
	path := "static/vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js"
	name := "static/vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryStorageApiJqueryStorageapiJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryStorageApiJqueryStorageapiJs() (*asset, error) {
	path := "static/vendor/jQuery-Storage-API/jquery.storageapi.js"
	name := "static/vendor/jQuery-Storage-API/jquery.storageapi.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryGmapJqueryGmapMinJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryGmapJqueryGmapMinJs() (*asset, error) {
	path := "static/vendor/jQuery-gMap/jquery.gmap.min.js"
	name := "static/vendor/jQuery-gMap/jquery.gmap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqcloud2DistJqcloudCss reads file data from disk. It returns an error on failure.
func staticVendorJqcloud2DistJqcloudCss() (*asset, error) {
	path := "static/vendor/jqcloud2/dist/jqcloud.css"
	name := "static/vendor/jqcloud2/dist/jqcloud.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqcloud2DistJqcloudJs reads file data from disk. It returns an error on failure.
func staticVendorJqcloud2DistJqcloudJs() (*asset, error) {
	path := "static/vendor/jqcloud2/dist/jqcloud.js"
	name := "static/vendor/jqcloud2/dist/jqcloud.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqgridCssUiJqgridCss reads file data from disk. It returns an error on failure.
func staticVendorJqgridCssUiJqgridCss() (*asset, error) {
	path := "static/vendor/jqgrid/css/ui.jqgrid.css"
	name := "static/vendor/jqgrid/css/ui.jqgrid.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqgridJsI18nGridLocaleEnJs reads file data from disk. It returns an error on failure.
func staticVendorJqgridJsI18nGridLocaleEnJs() (*asset, error) {
	path := "static/vendor/jqgrid/js/i18n/grid.locale-en.js"
	name := "static/vendor/jqgrid/js/i18n/grid.locale-en.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqgridJsJqueryJqgridJs reads file data from disk. It returns an error on failure.
func staticVendorJqgridJsJqueryJqgridJs() (*asset, error) {
	path := "static/vendor/jqgrid/js/jquery.jqGrid.js"
	name := "static/vendor/jqgrid/js/jquery.jqGrid.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryDistJqueryJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryDistJqueryJs() (*asset, error) {
	path := "static/vendor/jquery/dist/jquery.js"
	name := "static/vendor/jquery/dist/jquery.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryClassyloaderJsJqueryClassyloaderMinJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryClassyloaderJsJqueryClassyloaderMinJs() (*asset, error) {
	path := "static/vendor/jquery-classyloader/js/jquery.classyloader.min.js"
	name := "static/vendor/jquery-classyloader/js/jquery.classyloader.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryKnobJsJqueryKnobJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryKnobJsJqueryKnobJs() (*asset, error) {
	path := "static/vendor/jquery-knob/js/jquery.knob.js"
	name := "static/vendor/jquery-knob/js/jquery.knob.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryLocalizeI18nDistJqueryLocalizeJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryLocalizeI18nDistJqueryLocalizeJs() (*asset, error) {
	path := "static/vendor/jquery-localize-i18n/dist/jquery.localize.js"
	name := "static/vendor/jquery-localize-i18n/dist/jquery.localize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesAnimatedOverlayGif reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesAnimatedOverlayGif() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/animated-overlay.gif"
	name := "static/vendor/jquery-ui/themes/smoothness/images/animated-overlay.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_0_aaaaaa_40x100Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_0_aaaaaa_40x100Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_0_aaaaaa_40x100.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_0_aaaaaa_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_75_ffffff_40x100Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_75_ffffff_40x100Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_75_ffffff_40x100.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_75_ffffff_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_55_fbf9ee_1x400Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_55_fbf9ee_1x400Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_55_fbf9ee_1x400.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_55_fbf9ee_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_65_ffffff_1x400.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_dadada_1x400Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_dadada_1x400Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_dadada_1x400.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_dadada_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_e6e6e6_1x400Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_e6e6e6_1x400Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_e6e6e6_1x400.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_e6e6e6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_95_fef1ec_1x400Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_95_fef1ec_1x400Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_95_fef1ec_1x400.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_95_fef1ec_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiBg_highlightSoft_75_cccccc_1x100Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiBg_highlightSoft_75_cccccc_1x100Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_highlight-soft_75_cccccc_1x100.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-bg_highlight-soft_75_cccccc_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiIcons_222222_256x240Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_222222_256x240.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiIcons_2e83ff_256x240Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiIcons_2e83ff_256x240Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_2e83ff_256x240.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_2e83ff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiIcons_454545_256x240Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiIcons_454545_256x240Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_454545_256x240.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_454545_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiIcons_888888_256x240Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiIcons_888888_256x240Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_888888_256x240.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_888888_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessImagesUiIcons_cd0a0a_256x240Png reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessImagesUiIcons_cd0a0a_256x240Png() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_cd0a0a_256x240.png"
	name := "static/vendor/jquery-ui/themes/smoothness/images/ui-icons_cd0a0a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessJqueryUiCss reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessJqueryUiCss() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/jquery-ui.css"
	name := "static/vendor/jquery-ui/themes/smoothness/jquery-ui.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessJqueryUiMinCss reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessJqueryUiMinCss() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/jquery-ui.min.css"
	name := "static/vendor/jquery-ui/themes/smoothness/jquery-ui.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiThemesSmoothnessThemeCss reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiThemesSmoothnessThemeCss() (*asset, error) {
	path := "static/vendor/jquery-ui/themes/smoothness/theme.css"
	name := "static/vendor/jquery-ui/themes/smoothness/theme.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiAccordionJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiAccordionJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/accordion.js"
	name := "static/vendor/jquery-ui/ui/accordion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiAutocompleteJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiAutocompleteJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/autocomplete.js"
	name := "static/vendor/jquery-ui/ui/autocomplete.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiButtonJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiButtonJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/button.js"
	name := "static/vendor/jquery-ui/ui/button.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiCoreJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiCoreJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/core.js"
	name := "static/vendor/jquery-ui/ui/core.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiDatepickerJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiDatepickerJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/datepicker.js"
	name := "static/vendor/jquery-ui/ui/datepicker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiDialogJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiDialogJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/dialog.js"
	name := "static/vendor/jquery-ui/ui/dialog.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiDraggableJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiDraggableJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/draggable.js"
	name := "static/vendor/jquery-ui/ui/draggable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiDroppableJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiDroppableJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/droppable.js"
	name := "static/vendor/jquery-ui/ui/droppable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectBlindJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectBlindJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-blind.js"
	name := "static/vendor/jquery-ui/ui/effect-blind.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectBounceJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectBounceJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-bounce.js"
	name := "static/vendor/jquery-ui/ui/effect-bounce.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectClipJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectClipJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-clip.js"
	name := "static/vendor/jquery-ui/ui/effect-clip.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectDropJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectDropJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-drop.js"
	name := "static/vendor/jquery-ui/ui/effect-drop.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectExplodeJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectExplodeJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-explode.js"
	name := "static/vendor/jquery-ui/ui/effect-explode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectFadeJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectFadeJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-fade.js"
	name := "static/vendor/jquery-ui/ui/effect-fade.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectFoldJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectFoldJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-fold.js"
	name := "static/vendor/jquery-ui/ui/effect-fold.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectHighlightJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectHighlightJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-highlight.js"
	name := "static/vendor/jquery-ui/ui/effect-highlight.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectPuffJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectPuffJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-puff.js"
	name := "static/vendor/jquery-ui/ui/effect-puff.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectPulsateJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectPulsateJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-pulsate.js"
	name := "static/vendor/jquery-ui/ui/effect-pulsate.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectScaleJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectScaleJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-scale.js"
	name := "static/vendor/jquery-ui/ui/effect-scale.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectShakeJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectShakeJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-shake.js"
	name := "static/vendor/jquery-ui/ui/effect-shake.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectSizeJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectSizeJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-size.js"
	name := "static/vendor/jquery-ui/ui/effect-size.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectSlideJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectSlideJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-slide.js"
	name := "static/vendor/jquery-ui/ui/effect-slide.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectTransferJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectTransferJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect-transfer.js"
	name := "static/vendor/jquery-ui/ui/effect-transfer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiEffectJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiEffectJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/effect.js"
	name := "static/vendor/jquery-ui/ui/effect.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiMenuJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiMenuJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/menu.js"
	name := "static/vendor/jquery-ui/ui/menu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiMouseJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiMouseJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/mouse.js"
	name := "static/vendor/jquery-ui/ui/mouse.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiPositionJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiPositionJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/position.js"
	name := "static/vendor/jquery-ui/ui/position.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiProgressbarJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiProgressbarJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/progressbar.js"
	name := "static/vendor/jquery-ui/ui/progressbar.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiResizableJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiResizableJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/resizable.js"
	name := "static/vendor/jquery-ui/ui/resizable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiSelectableJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiSelectableJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/selectable.js"
	name := "static/vendor/jquery-ui/ui/selectable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiSelectmenuJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiSelectmenuJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/selectmenu.js"
	name := "static/vendor/jquery-ui/ui/selectmenu.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiSliderJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiSliderJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/slider.js"
	name := "static/vendor/jquery-ui/ui/slider.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiSortableJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiSortableJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/sortable.js"
	name := "static/vendor/jquery-ui/ui/sortable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiSpinnerJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiSpinnerJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/spinner.js"
	name := "static/vendor/jquery-ui/ui/spinner.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiTabsJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiTabsJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/tabs.js"
	name := "static/vendor/jquery-ui/ui/tabs.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiTooltipJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiTooltipJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/tooltip.js"
	name := "static/vendor/jquery-ui/ui/tooltip.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryUiUiWidgetJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryUiUiWidgetJs() (*asset, error) {
	path := "static/vendor/jquery-ui/ui/widget.js"
	name := "static/vendor/jquery-ui/ui/widget.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryValidationDistJqueryValidateJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryValidationDistJqueryValidateJs() (*asset, error) {
	path := "static/vendor/jquery-validation/dist/jquery.validate.js"
	name := "static/vendor/jquery-validation/dist/jquery.validate.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryEasingJsJqueryEasingJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryEasingJsJqueryEasingJs() (*asset, error) {
	path := "static/vendor/jquery.easing/js/jquery.easing.js"
	name := "static/vendor/jquery.easing/js/jquery.easing.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryEasyPieChartDistJqueryEasypiechartJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryEasyPieChartDistJqueryEasypiechartJs() (*asset, error) {
	path := "static/vendor/jquery.easy-pie-chart/dist/jquery.easypiechart.js"
	name := "static/vendor/jquery.easy-pie-chart/dist/jquery.easypiechart.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryInputmaskDistJqueryInputmaskBundleJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryInputmaskDistJqueryInputmaskBundleJs() (*asset, error) {
	path := "static/vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js"
	name := "static/vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryStepsBuildJqueryStepsJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryStepsBuildJqueryStepsJs() (*asset, error) {
	path := "static/vendor/jquery.steps/build/jquery.steps.js"
	name := "static/vendor/jquery.steps/build/jquery.steps.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorJqueryuiTouchPunchJqueryUiTouchPunchMinJs reads file data from disk. It returns an error on failure.
func staticVendorJqueryuiTouchPunchJqueryUiTouchPunchMinJs() (*asset, error) {
	path := "static/vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js"
	name := "static/vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorLoadersCssLoadersCss reads file data from disk. It returns an error on failure.
func staticVendorLoadersCssLoadersCss() (*asset, error) {
	path := "static/vendor/loaders.css/loaders.css"
	name := "static/vendor/loaders.css/loaders.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMatchmediaMatchmediaJs reads file data from disk. It returns an error on failure.
func staticVendorMatchmediaMatchmediaJs() (*asset, error) {
	path := "static/vendor/matchMedia/matchMedia.js"
	name := "static/vendor/matchMedia/matchMedia.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistCssBootstrapColorpickerCss reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistCssBootstrapColorpickerCss() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/css/bootstrap-colorpicker.css"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/css/bootstrap-colorpicker.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaHorizontalPng reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaHorizontalPng() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha-horizontal.png"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha-horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaPng reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaPng() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha.png"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHueHorizontalPng reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHueHorizontalPng() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue-horizontal.png"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue-horizontal.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHuePng reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHuePng() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue.png"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerSaturationPng reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerSaturationPng() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/saturation.png"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/saturation.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMjolnicBootstrapColorpickerDistJsBootstrapColorpickerJs reads file data from disk. It returns an error on failure.
func staticVendorMjolnicBootstrapColorpickerDistJsBootstrapColorpickerJs() (*asset, error) {
	path := "static/vendor/mjolnic-bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js"
	name := "static/vendor/mjolnic-bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorModernizrModernizrCustomJs reads file data from disk. It returns an error on failure.
func staticVendorModernizrModernizrCustomJs() (*asset, error) {
	path := "static/vendor/modernizr/modernizr.custom.js"
	name := "static/vendor/modernizr/modernizr.custom.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMomentMinMomentWithLocalesMinJs reads file data from disk. It returns an error on failure.
func staticVendorMomentMinMomentWithLocalesMinJs() (*asset, error) {
	path := "static/vendor/moment/min/moment-with-locales.min.js"
	name := "static/vendor/moment/min/moment-with-locales.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMorrisJsMorrisCss reads file data from disk. It returns an error on failure.
func staticVendorMorrisJsMorrisCss() (*asset, error) {
	path := "static/vendor/morris.js/morris.css"
	name := "static/vendor/morris.js/morris.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorMorrisJsMorrisJs reads file data from disk. It returns an error on failure.
func staticVendorMorrisJsMorrisJs() (*asset, error) {
	path := "static/vendor/morris.js/morris.js"
	name := "static/vendor/morris.js/morris.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorNestableJqueryNestableJs reads file data from disk. It returns an error on failure.
func staticVendorNestableJqueryNestableJs() (*asset, error) {
	path := "static/vendor/nestable/jquery.nestable.js"
	name := "static/vendor/nestable/jquery.nestable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorParsleyjsDistParsleyMinJs reads file data from disk. It returns an error on failure.
func staticVendorParsleyjsDistParsleyMinJs() (*asset, error) {
	path := "static/vendor/parsleyjs/dist/parsley.min.js"
	name := "static/vendor/parsleyjs/dist/parsley.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorRaphaelRaphaelJs reads file data from disk. It returns an error on failure.
func staticVendorRaphaelRaphaelJs() (*asset, error) {
	path := "static/vendor/raphael/raphael.js"
	name := "static/vendor/raphael/raphael.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorRickshawRickshawJs reads file data from disk. It returns an error on failure.
func staticVendorRickshawRickshawJs() (*asset, error) {
	path := "static/vendor/rickshaw/rickshaw.js"
	name := "static/vendor/rickshaw/rickshaw.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorRickshawRickshawMinCss reads file data from disk. It returns an error on failure.
func staticVendorRickshawRickshawMinCss() (*asset, error) {
	path := "static/vendor/rickshaw/rickshaw.min.css"
	name := "static/vendor/rickshaw/rickshaw.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorScreenfullDistScreenfullJs reads file data from disk. It returns an error on failure.
func staticVendorScreenfullDistScreenfullJs() (*asset, error) {
	path := "static/vendor/screenfull/dist/screenfull.js"
	name := "static/vendor/screenfull/dist/screenfull.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSeiyriaBootstrapSliderDistBootstrapSliderMinJs reads file data from disk. It returns an error on failure.
func staticVendorSeiyriaBootstrapSliderDistBootstrapSliderMinJs() (*asset, error) {
	path := "static/vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js"
	name := "static/vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSeiyriaBootstrapSliderDistCssBootstrapSliderMinCss reads file data from disk. It returns an error on failure.
func staticVendorSeiyriaBootstrapSliderDistCssBootstrapSliderMinCss() (*asset, error) {
	path := "static/vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css"
	name := "static/vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSelect2DistCssSelect2Css reads file data from disk. It returns an error on failure.
func staticVendorSelect2DistCssSelect2Css() (*asset, error) {
	path := "static/vendor/select2/dist/css/select2.css"
	name := "static/vendor/select2/dist/css/select2.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSelect2DistJsSelect2Js reads file data from disk. It returns an error on failure.
func staticVendorSelect2DistJsSelect2Js() (*asset, error) {
	path := "static/vendor/select2/dist/js/select2.js"
	name := "static/vendor/select2/dist/js/select2.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSelect2BootstrapThemeDistSelect2BootstrapCss reads file data from disk. It returns an error on failure.
func staticVendorSelect2BootstrapThemeDistSelect2BootstrapCss() (*asset, error) {
	path := "static/vendor/select2-bootstrap-theme/dist/select2-bootstrap.css"
	name := "static/vendor/select2-bootstrap-theme/dist/select2-bootstrap.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsCssSimpleLineIconsCss reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsCssSimpleLineIconsCss() (*asset, error) {
	path := "static/vendor/simple-line-icons/css/simple-line-icons.css"
	name := "static/vendor/simple-line-icons/css/simple-line-icons.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsFontsSimpleLineIconsEot reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsFontsSimpleLineIconsEot() (*asset, error) {
	path := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot"
	name := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsFontsSimpleLineIconsSvg reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsFontsSimpleLineIconsSvg() (*asset, error) {
	path := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg"
	name := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsFontsSimpleLineIconsTtf reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsFontsSimpleLineIconsTtf() (*asset, error) {
	path := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf"
	name := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsFontsSimpleLineIconsWoff reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsFontsSimpleLineIconsWoff() (*asset, error) {
	path := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff"
	name := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSimpleLineIconsFontsSimpleLineIconsWoff2 reads file data from disk. It returns an error on failure.
func staticVendorSimpleLineIconsFontsSimpleLineIconsWoff2() (*asset, error) {
	path := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2"
	name := "static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSkyconsSkyconsJs reads file data from disk. It returns an error on failure.
func staticVendorSkyconsSkyconsJs() (*asset, error) {
	path := "static/vendor/skycons/skycons.js"
	name := "static/vendor/skycons/skycons.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSlimscrollJquerySlimscrollMinJs reads file data from disk. It returns an error on failure.
func staticVendorSlimscrollJquerySlimscrollMinJs() (*asset, error) {
	path := "static/vendor/slimScroll/jquery.slimscroll.min.js"
	name := "static/vendor/slimScroll/jquery.slimscroll.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSparklineIndexJs reads file data from disk. It returns an error on failure.
func staticVendorSparklineIndexJs() (*asset, error) {
	path := "static/vendor/sparkline/index.js"
	name := "static/vendor/sparkline/index.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSpinkitCssSpinkitCss reads file data from disk. It returns an error on failure.
func staticVendorSpinkitCssSpinkitCss() (*asset, error) {
	path := "static/vendor/spinkit/css/spinkit.css"
	name := "static/vendor/spinkit/css/spinkit.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSweetalertDistSweetalertCss reads file data from disk. It returns an error on failure.
func staticVendorSweetalertDistSweetalertCss() (*asset, error) {
	path := "static/vendor/sweetalert/dist/sweetalert.css"
	name := "static/vendor/sweetalert/dist/sweetalert.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorSweetalertDistSweetalertMinJs reads file data from disk. It returns an error on failure.
func staticVendorSweetalertDistSweetalertMinJs() (*asset, error) {
	path := "static/vendor/sweetalert/dist/sweetalert.min.js"
	name := "static/vendor/sweetalert/dist/sweetalert.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsCssWeatherIconsWindMinCss reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsCssWeatherIconsWindMinCss() (*asset, error) {
	path := "static/vendor/weather-icons/css/weather-icons-wind.min.css"
	name := "static/vendor/weather-icons/css/weather-icons-wind.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsCssWeatherIconsMinCss reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsCssWeatherIconsMinCss() (*asset, error) {
	path := "static/vendor/weather-icons/css/weather-icons.min.css"
	name := "static/vendor/weather-icons/css/weather-icons.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsFontWeathericonsRegularWebfontEot reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsFontWeathericonsRegularWebfontEot() (*asset, error) {
	path := "static/vendor/weather-icons/font/weathericons-regular-webfont.eot"
	name := "static/vendor/weather-icons/font/weathericons-regular-webfont.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsFontWeathericonsRegularWebfontSvg reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsFontWeathericonsRegularWebfontSvg() (*asset, error) {
	path := "static/vendor/weather-icons/font/weathericons-regular-webfont.svg"
	name := "static/vendor/weather-icons/font/weathericons-regular-webfont.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsFontWeathericonsRegularWebfontTtf reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsFontWeathericonsRegularWebfontTtf() (*asset, error) {
	path := "static/vendor/weather-icons/font/weathericons-regular-webfont.ttf"
	name := "static/vendor/weather-icons/font/weathericons-regular-webfont.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff() (*asset, error) {
	path := "static/vendor/weather-icons/font/weathericons-regular-webfont.woff"
	name := "static/vendor/weather-icons/font/weathericons-regular-webfont.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff2 reads file data from disk. It returns an error on failure.
func staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff2() (*asset, error) {
	path := "static/vendor/weather-icons/font/weathericons-regular-webfont.woff2"
	name := "static/vendor/weather-icons/font/weathericons-regular-webfont.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorWhirlDistWhirlCss reads file data from disk. It returns an error on failure.
func staticVendorWhirlDistWhirlCss() (*asset, error) {
	path := "static/vendor/whirl/dist/whirl.css"
	name := "static/vendor/whirl/dist/whirl.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorXEditableDistBootstrap3EditableCssBootstrapEditableCss reads file data from disk. It returns an error on failure.
func staticVendorXEditableDistBootstrap3EditableCssBootstrapEditableCss() (*asset, error) {
	path := "static/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css"
	name := "static/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorXEditableDistBootstrap3EditableImgClearPng reads file data from disk. It returns an error on failure.
func staticVendorXEditableDistBootstrap3EditableImgClearPng() (*asset, error) {
	path := "static/vendor/x-editable/dist/bootstrap3-editable/img/clear.png"
	name := "static/vendor/x-editable/dist/bootstrap3-editable/img/clear.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorXEditableDistBootstrap3EditableImgLoadingGif reads file data from disk. It returns an error on failure.
func staticVendorXEditableDistBootstrap3EditableImgLoadingGif() (*asset, error) {
	path := "static/vendor/x-editable/dist/bootstrap3-editable/img/loading.gif"
	name := "static/vendor/x-editable/dist/bootstrap3-editable/img/loading.gif"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableJs reads file data from disk. It returns an error on failure.
func staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableJs() (*asset, error) {
	path := "static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js"
	name := "static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableMinJs reads file data from disk. It returns an error on failure.
func staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableMinJs() (*asset, error) {
	path := "static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.min.js"
	name := "static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/1block": static1block,
	"static/alert_success.html": staticAlert_successHtml,
	"static/anonym_history.html": staticAnonym_historyHtml,
	"static/anonym_money_transfer.html": staticAnonym_money_transferHtml,
	"static/change_node_key.html": staticChange_node_keyHtml,
	"static/citizen_bill_payment.html": staticCitizen_bill_paymentHtml,
	"static/citizen_marriage_registration.html": staticCitizen_marriage_registrationHtml,
	"static/citizen_property.html": staticCitizen_propertyHtml,
	"static/citizen_rule_details.html": staticCitizen_rule_detailsHtml,
	"static/company_application_purchase.html": staticCompany_application_purchaseHtml,
	"static/company_contract.html": staticCompany_contractHtml,
	"static/company_currency_exchange.html": staticCompany_currency_exchangeHtml,
	"static/company_new_good.html": staticCompany_new_goodHtml,
	"static/company_new_item.html": staticCompany_new_itemHtml,
	"static/company_offer_seller.html": staticCompany_offer_sellerHtml,
	"static/company_offer_transport.html": staticCompany_offer_transportHtml,
	"static/company_select_transport.html": staticCompany_select_transportHtml,
	"static/company_shares.html": staticCompany_sharesHtml,
	"static/company_shares_exchange.html": staticCompany_shares_exchangeHtml,
	"static/company_smart_contracts.html": staticCompany_smart_contractsHtml,
	"static/css/app.css": staticCssAppCss,
	"static/css/bootstrap.css": staticCssBootstrapCss,
	"static/css/style.css": staticCssStyleCss,
	"static/css/theme-a.css": staticCssThemeACss,
	"static/css/theme-b.css": staticCssThemeBCss,
	"static/css/theme-c.css": staticCssThemeCCss,
	"static/css/theme-d.css": staticCssThemeDCss,
	"static/css/theme-e.css": staticCssThemeECss,
	"static/css/theme-f.css": staticCssThemeFCss,
	"static/css/theme-g.css": staticCssThemeGCss,
	"static/css/theme-h.css": staticCssThemeHCss,
	"static/dashboard_anonym.html": staticDashboard_anonymHtml,
	"static/dashboard_cb.html": staticDashboard_cbHtml,
	"static/dashboard_citizen.html": staticDashboard_citizenHtml,
	"static/dashboard_company.html": staticDashboard_companyHtml,
	"static/dashboard_gov.html": staticDashboard_govHtml,
	"static/dashboard_health.html": staticDashboard_healthHtml,
	"static/data/entries_doctor.json": staticDataEntries_doctorJson,
	"static/data/immunizations.json": staticDataImmunizationsJson,
	"static/data/medication.json": staticDataMedicationJson,
	"static/data/patients.json": staticDataPatientsJson,
	"static/entrance.html": staticEntranceHtml,
	"static/gov_citizens.html": staticGov_citizensHtml,
	"static/gov_currency_exchange.html": staticGov_currency_exchangeHtml,
	"static/gov_shares_exchange.html": staticGov_shares_exchangeHtml,
	"static/health_buy_medicament.html": staticHealth_buy_medicamentHtml,
	"static/health_facility.html": staticHealth_facilityHtml,
	"static/health_immunization_records.html": staticHealth_immunization_recordsHtml,
	"static/health_medical_record.html": staticHealth_medical_recordHtml,
	"static/health_medication_records.html": staticHealth_medication_recordsHtml,
	"static/health_patient.html": staticHealth_patientHtml,
	"static/i18n/site-en.json": staticI18nSiteEnJson,
	"static/i18n/site-es.json": staticI18nSiteEsJson,
	"static/img/QR.png": staticImgQrPng,
	"static/img/Thumbs.db": staticImgThumbsDb,
	"static/img/US.svg": staticImgUsSvg,
	"static/img/bg1.jpg": staticImgBg1Jpg,
	"static/img/bg10.jpg": staticImgBg10Jpg,
	"static/img/bg2.jpg": staticImgBg2Jpg,
	"static/img/bg3.jpg": staticImgBg3Jpg,
	"static/img/bg4.jpg": staticImgBg4Jpg,
	"static/img/bg5.jpg": staticImgBg5Jpg,
	"static/img/bg6.jpg": staticImgBg6Jpg,
	"static/img/bg7.jpg": staticImgBg7Jpg,
	"static/img/bg8.jpg": staticImgBg8Jpg,
	"static/img/bg9.jpg": staticImgBg9Jpg,
	"static/img/dummy.png": staticImgDummyPng,
	"static/img/lock-bg.jpg": staticImgLockBgJpg,
	"static/img/logo-single.png": staticImgLogoSinglePng,
	"static/img/logo.png": staticImgLogoPng,
	"static/img/mb-sample.jpg": staticImgMbSampleJpg,
	"static/img/mockup.png": staticImgMockupPng,
	"static/img/profile-bg.jpg": staticImgProfileBgJpg,
	"static/img/radio_icon.png": staticImgRadio_iconPng,
	"static/img/user/01.jpg": staticImgUser01Jpg,
	"static/img/user/02.jpg": staticImgUser02Jpg,
	"static/img/user/03.jpg": staticImgUser03Jpg,
	"static/img/user/04.jpg": staticImgUser04Jpg,
	"static/img/user/05.jpg": staticImgUser05Jpg,
	"static/img/user/06.jpg": staticImgUser06Jpg,
	"static/img/user/07.jpg": staticImgUser07Jpg,
	"static/img/user/08.jpg": staticImgUser08Jpg,
	"static/img/user/09.jpg": staticImgUser09Jpg,
	"static/img/user/10.jpg": staticImgUser10Jpg,
	"static/img/user/11.jpg": staticImgUser11Jpg,
	"static/img/user/12.jpg": staticImgUser12Jpg,
	"static/img/user/13.jpg": staticImgUser13Jpg,
	"static/img/user/Thumbs.db": staticImgUserThumbsDb,
	"static/index.html": staticIndexHtml,
	"static/install_step_0.html": staticInstall_step_0Html,
	"static/install_step_1.html": staticInstall_step_1Html,
	"static/js/app.js": staticJsAppJs,
	"static/js/asn1hex-1.1.min.js": staticJsAsn1hex11MinJs,
	"static/js/base64.js": staticJsBase64Js,
	"static/js/clipboard.js": staticJsClipboardJs,
	"static/js/crypto/asn1-1.0.min.js": staticJsCryptoAsn110MinJs,
	"static/js/crypto/asn1hex-1.1.min.js": staticJsCryptoAsn1hex11MinJs,
	"static/js/crypto/crypto-1.1.min.js": staticJsCryptoCrypto11MinJs,
	"static/js/crypto/ecdsa-modified-1.0.min.js": staticJsCryptoEcdsaModified10MinJs,
	"static/js/crypto/ecparam-1.0.min.js": staticJsCryptoEcparam10MinJs,
	"static/js/crypto/ext/cj/aes.js": staticJsCryptoExtCjAesJs,
	"static/js/crypto/ext/cj/cryptojs-312-core-fix-min.js": staticJsCryptoExtCjCryptojs312CoreFixMinJs,
	"static/js/crypto/ext/cj/ec-patch-min.js": staticJsCryptoExtCjEcPatchMinJs,
	"static/js/crypto/ext/cj/md5_min.js": staticJsCryptoExtCjMd5_minJs,
	"static/js/crypto/ext/cj/sha1_min.js": staticJsCryptoExtCjSha1_minJs,
	"static/js/crypto/ext/cj/sha256_min.js": staticJsCryptoExtCjSha256_minJs,
	"static/js/crypto/ext/cj/x64-core_min.js": staticJsCryptoExtCjX64Core_minJs,
	"static/js/crypto/ext/ec-min.js": staticJsCryptoExtEcMinJs,
	"static/js/crypto/ext/ec-patch-min.js": staticJsCryptoExtEcPatchMinJs,
	"static/js/crypto/ext/jsbn-min.js": staticJsCryptoExtJsbnMinJs,
	"static/js/crypto/ext/jsbn2-min.js": staticJsCryptoExtJsbn2MinJs,
	"static/js/crypto/ext/prng4-min.js": staticJsCryptoExtPrng4MinJs,
	"static/js/crypto/ext/rng-min.js": staticJsCryptoExtRngMinJs,
	"static/js/crypto/ext/yahoo-min.js": staticJsCryptoExtYahooMinJs,
	"static/js/datetime.js": staticJsDatetimeJs,
	"static/js/demo/demo-datatable.js": staticJsDemoDemoDatatableJs,
	"static/js/demo/demo-flot.js": staticJsDemoDemoFlotJs,
	"static/js/demo/demo-forms.js": staticJsDemoDemoFormsJs,
	"static/js/demo/demo-jqcloud.js": staticJsDemoDemoJqcloudJs,
	"static/js/demo/demo-jqgrid.js": staticJsDemoDemoJqgridJs,
	"static/js/demo/demo-nestable.js": staticJsDemoDemoNestableJs,
	"static/js/demo/demo-panels.js": staticJsDemoDemoPanelsJs,
	"static/js/demo/demo-rtl.js": staticJsDemoDemoRtlJs,
	"static/js/demo/demo-search.js": staticJsDemoDemoSearchJs,
	"static/js/demo/demo-sortable.js": staticJsDemoDemoSortableJs,
	"static/js/demo/demo-upload.js": staticJsDemoDemoUploadJs,
	"static/js/demo/demo-vector-map.js": staticJsDemoDemoVectorMapJs,
	"static/js/demo/demo-wizard.js": staticJsDemoDemoWizardJs,
	"static/js/demo/demo-xeditable.js": staticJsDemoDemoXeditableJs,
	"static/js/index.js": staticJsIndexJs,
	"static/js/jsbn.js": staticJsJsbnJs,
	"static/js/jsbn2.js": staticJsJsbn2Js,
	"static/js/md5.js": staticJsMd5Js,
	"static/js/rsa.js": staticJsRsaJs,
	"static/js/rsa2.js": staticJsRsa2Js,
	"static/js/rsapem-1.1.js": staticJsRsapem11Js,
	"static/js/rsasign-1.2.min.js": staticJsRsasign12MinJs,
	"static/js/send_to_net.js": staticJsSend_to_netJs,
	"static/js/sha1.js": staticJsSha1Js,
	"static/js/sha256.js": staticJsSha256Js,
	"static/js/spin.js": staticJsSpinJs,
	"static/lang/1.ini": staticLang1Ini,
	"static/lang/42.ini": staticLang42Ini,
	"static/lang/en-us.all.json": staticLangEnUsAllJson,
	"static/lang/locale_en-US.ini": staticLangLocale_enUsIni,
	"static/lang/locale_ru-RU.ini": staticLangLocale_ruRuIni,
	"static/login.html": staticLoginHtml,
	"static/menu.html": staticMenuHtml,
	"static/modal_anonym.html": staticModal_anonymHtml,
	"static/modal_cb.html": staticModal_cbHtml,
	"static/modal_citizen.html": staticModal_citizenHtml,
	"static/modal_company.html": staticModal_companyHtml,
	"static/modal_gov.html": staticModal_govHtml,
	"static/modal_health.html": staticModal_healthHtml,
	"static/pass.html": staticPassHtml,
	"static/sass/_colors.scss": staticSass_colorsScss,
	"static/sass/_mixins.scss": staticSass_mixinsScss,
	"static/sass/style.scss": staticSassStyleScss,
	"static/signatures.html": staticSignaturesHtml,
	"static/templates/login.html": staticTemplatesLoginHtml,
	"static/templates/modal.html": staticTemplatesModalHtml,
	"static/test.html": staticTestHtml,
	"static/updating_blockchain.html": staticUpdating_blockchainHtml,
	"static/vendor/Chart.js/Chart.js": staticVendorChartJsChartJs,
	"static/vendor/Flot/jquery.flot.categories.js": staticVendorFlotJqueryFlotCategoriesJs,
	"static/vendor/Flot/jquery.flot.js": staticVendorFlotJqueryFlotJs,
	"static/vendor/Flot/jquery.flot.pie.js": staticVendorFlotJqueryFlotPieJs,
	"static/vendor/Flot/jquery.flot.resize.js": staticVendorFlotJqueryFlotResizeJs,
	"static/vendor/Flot/jquery.flot.time.js": staticVendorFlotJqueryFlotTimeJs,
	"static/vendor/animate.css/animate.min.css": staticVendorAnimateCssAnimateMinCss,
	"static/vendor/animo.js/animo.js": staticVendorAnimoJsAnimoJs,
	"static/vendor/blueimp-canvas-to-blob/js/canvas-to-blob.js": staticVendorBlueimpCanvasToBlobJsCanvasToBlobJs,
	"static/vendor/blueimp-file-upload/css/jquery.fileupload.css": staticVendorBlueimpFileUploadCssJqueryFileuploadCss,
	"static/vendor/blueimp-file-upload/img/loading.gif": staticVendorBlueimpFileUploadImgLoadingGif,
	"static/vendor/blueimp-file-upload/img/progressbar.gif": staticVendorBlueimpFileUploadImgProgressbarGif,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-angular.js": staticVendorBlueimpFileUploadJsJqueryFileuploadAngularJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-audio.js": staticVendorBlueimpFileUploadJsJqueryFileuploadAudioJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-image.js": staticVendorBlueimpFileUploadJsJqueryFileuploadImageJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-jquery-ui.js": staticVendorBlueimpFileUploadJsJqueryFileuploadJqueryUiJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-process.js": staticVendorBlueimpFileUploadJsJqueryFileuploadProcessJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-ui.js": staticVendorBlueimpFileUploadJsJqueryFileuploadUiJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-validate.js": staticVendorBlueimpFileUploadJsJqueryFileuploadValidateJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload-video.js": staticVendorBlueimpFileUploadJsJqueryFileuploadVideoJs,
	"static/vendor/blueimp-file-upload/js/jquery.fileupload.js": staticVendorBlueimpFileUploadJsJqueryFileuploadJs,
	"static/vendor/blueimp-file-upload/js/jquery.iframe-transport.js": staticVendorBlueimpFileUploadJsJqueryIframeTransportJs,
	"static/vendor/blueimp-load-image/js/load-image.all.min.js": staticVendorBlueimpLoadImageJsLoadImageAllMinJs,
	"static/vendor/blueimp-tmpl/js/tmpl.js": staticVendorBlueimpTmplJsTmplJs,
	"static/vendor/bootstrap/dist/css/bootstrap.css": staticVendorBootstrapDistCssBootstrapCss,
	"static/vendor/bootstrap/dist/js/bootstrap.js": staticVendorBootstrapDistJsBootstrapJs,
	"static/vendor/bootstrap-filestyle/src/bootstrap-filestyle.js": staticVendorBootstrapFilestyleSrcBootstrapFilestyleJs,
	"static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css": staticVendorBootstrapTagsinputDistBootstrapTagsinputCss,
	"static/vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js": staticVendorBootstrapTagsinputDistBootstrapTagsinputMinJs,
	"static/vendor/bootstrap-tour/build/css/bootstrap-tour-standalone.css": staticVendorBootstrapTourBuildCssBootstrapTourStandaloneCss,
	"static/vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js": staticVendorBootstrapTourBuildJsBootstrapTourStandaloneJs,
	"static/vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js": staticVendorBootstrapWysiwygBootstrapWysiwygJs,
	"static/vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js": staticVendorBootstrapWysiwygExternalJqueryHotkeysJs,
	"static/vendor/chartist/dist/chartist.js": staticVendorChartistDistChartistJs,
	"static/vendor/chartist/dist/chartist.min.css": staticVendorChartistDistChartistMinCss,
	"static/vendor/chosen_v1.2.0/chosen-sprite.png": staticVendorChosen_v120ChosenSpritePng,
	"static/vendor/chosen_v1.2.0/chosen-sprite@2x.png": staticVendorChosen_v120ChosenSprite2xPng,
	"static/vendor/chosen_v1.2.0/chosen.jquery.min.js": staticVendorChosen_v120ChosenJqueryMinJs,
	"static/vendor/chosen_v1.2.0/chosen.min.css": staticVendorChosen_v120ChosenMinCss,
	"static/vendor/cropper/dist/cropper.css": staticVendorCropperDistCropperCss,
	"static/vendor/cropper/dist/cropper.js": staticVendorCropperDistCropperJs,
	"static/vendor/d3/d3.min.js": staticVendorD3D3MinJs,
	"static/vendor/dataTables.fontAwesome/index.css": staticVendorDatatablesFontawesomeIndexCss,
	"static/vendor/datatables/media/css/dataTables.bootstrap.css": staticVendorDatatablesMediaCssDatatablesBootstrapCss,
	"static/vendor/datatables/media/images/Sorting icons.psd": staticVendorDatatablesMediaImagesSortingIconsPsd,
	"static/vendor/datatables/media/images/favicon.ico": staticVendorDatatablesMediaImagesFaviconIco,
	"static/vendor/datatables/media/images/sort_asc.png": staticVendorDatatablesMediaImagesSort_ascPng,
	"static/vendor/datatables/media/images/sort_asc_disabled.png": staticVendorDatatablesMediaImagesSort_asc_disabledPng,
	"static/vendor/datatables/media/images/sort_both.png": staticVendorDatatablesMediaImagesSort_bothPng,
	"static/vendor/datatables/media/images/sort_desc.png": staticVendorDatatablesMediaImagesSort_descPng,
	"static/vendor/datatables/media/images/sort_desc_disabled.png": staticVendorDatatablesMediaImagesSort_desc_disabledPng,
	"static/vendor/datatables/media/js/dataTables.bootstrap.js": staticVendorDatatablesMediaJsDatatablesBootstrapJs,
	"static/vendor/datatables/media/js/jquery.dataTables.min.js": staticVendorDatatablesMediaJsJqueryDatatablesMinJs,
	"static/vendor/datatables-colvis/css/dataTables.colVis.css": staticVendorDatatablesColvisCssDatatablesColvisCss,
	"static/vendor/datatables-colvis/js/dataTables.colVis.js": staticVendorDatatablesColvisJsDatatablesColvisJs,
	"static/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css": staticVendorEonasdanBootstrapDatetimepickerBuildCssBootstrapDatetimepickerMinCss,
	"static/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js": staticVendorEonasdanBootstrapDatetimepickerBuildJsBootstrapDatetimepickerMinJs,
	"static/vendor/fastclick/lib/fastclick.js": staticVendorFastclickLibFastclickJs,
	"static/vendor/flatdoc/flatdoc.js": staticVendorFlatdocFlatdocJs,
	"static/vendor/flot-spline/js/jquery.flot.spline.min.js": staticVendorFlotSplineJsJqueryFlotSplineMinJs,
	"static/vendor/flot.tooltip/js/jquery.flot.tooltip.min.js": staticVendorFlotTooltipJsJqueryFlotTooltipMinJs,
	"static/vendor/fontawesome/css/font-awesome.min.css": staticVendorFontawesomeCssFontAwesomeMinCss,
	"static/vendor/fontawesome/fonts/FontAwesome.otf": staticVendorFontawesomeFontsFontawesomeOtf,
	"static/vendor/fontawesome/fonts/fontawesome-webfont.eot": staticVendorFontawesomeFontsFontawesomeWebfontEot,
	"static/vendor/fontawesome/fonts/fontawesome-webfont.svg": staticVendorFontawesomeFontsFontawesomeWebfontSvg,
	"static/vendor/fontawesome/fonts/fontawesome-webfont.ttf": staticVendorFontawesomeFontsFontawesomeWebfontTtf,
	"static/vendor/fontawesome/fonts/fontawesome-webfont.woff": staticVendorFontawesomeFontsFontawesomeWebfontWoff,
	"static/vendor/fontawesome/fonts/fontawesome-webfont.woff2": staticVendorFontawesomeFontsFontawesomeWebfontWoff2,
	"static/vendor/fullcalendar/dist/fullcalendar.css": staticVendorFullcalendarDistFullcalendarCss,
	"static/vendor/fullcalendar/dist/fullcalendar.min.js": staticVendorFullcalendarDistFullcalendarMinJs,
	"static/vendor/fullcalendar/dist/gcal.js": staticVendorFullcalendarDistGcalJs,
	"static/vendor/html.sortable/dist/html.sortable.js": staticVendorHtmlSortableDistHtmlSortableJs,
	"static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css": staticVendorIkaJvectormapJqueryJvectormap122Css,
	"static/vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js": staticVendorIkaJvectormapJqueryJvectormap122MinJs,
	"static/vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js": staticVendorIkaJvectormapJqueryJvectormapUsMillEnJs,
	"static/vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js": staticVendorIkaJvectormapJqueryJvectormapWorldMillEnJs,
	"static/vendor/jQuery-Storage-API/jquery.storageapi.js": staticVendorJqueryStorageApiJqueryStorageapiJs,
	"static/vendor/jQuery-gMap/jquery.gmap.min.js": staticVendorJqueryGmapJqueryGmapMinJs,
	"static/vendor/jqcloud2/dist/jqcloud.css": staticVendorJqcloud2DistJqcloudCss,
	"static/vendor/jqcloud2/dist/jqcloud.js": staticVendorJqcloud2DistJqcloudJs,
	"static/vendor/jqgrid/css/ui.jqgrid.css": staticVendorJqgridCssUiJqgridCss,
	"static/vendor/jqgrid/js/i18n/grid.locale-en.js": staticVendorJqgridJsI18nGridLocaleEnJs,
	"static/vendor/jqgrid/js/jquery.jqGrid.js": staticVendorJqgridJsJqueryJqgridJs,
	"static/vendor/jquery/dist/jquery.js": staticVendorJqueryDistJqueryJs,
	"static/vendor/jquery-classyloader/js/jquery.classyloader.min.js": staticVendorJqueryClassyloaderJsJqueryClassyloaderMinJs,
	"static/vendor/jquery-knob/js/jquery.knob.js": staticVendorJqueryKnobJsJqueryKnobJs,
	"static/vendor/jquery-localize-i18n/dist/jquery.localize.js": staticVendorJqueryLocalizeI18nDistJqueryLocalizeJs,
	"static/vendor/jquery-ui/themes/smoothness/images/animated-overlay.gif": staticVendorJqueryUiThemesSmoothnessImagesAnimatedOverlayGif,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_0_aaaaaa_40x100.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_0_aaaaaa_40x100Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_flat_75_ffffff_40x100.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_75_ffffff_40x100Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_55_fbf9ee_1x400.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_55_fbf9ee_1x400Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_65_ffffff_1x400.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_65_ffffff_1x400Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_dadada_1x400.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_dadada_1x400Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_75_e6e6e6_1x400.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_e6e6e6_1x400Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_glass_95_fef1ec_1x400.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_95_fef1ec_1x400Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-bg_highlight-soft_75_cccccc_1x100.png": staticVendorJqueryUiThemesSmoothnessImagesUiBg_highlightSoft_75_cccccc_1x100Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-icons_222222_256x240.png": staticVendorJqueryUiThemesSmoothnessImagesUiIcons_222222_256x240Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-icons_2e83ff_256x240.png": staticVendorJqueryUiThemesSmoothnessImagesUiIcons_2e83ff_256x240Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-icons_454545_256x240.png": staticVendorJqueryUiThemesSmoothnessImagesUiIcons_454545_256x240Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-icons_888888_256x240.png": staticVendorJqueryUiThemesSmoothnessImagesUiIcons_888888_256x240Png,
	"static/vendor/jquery-ui/themes/smoothness/images/ui-icons_cd0a0a_256x240.png": staticVendorJqueryUiThemesSmoothnessImagesUiIcons_cd0a0a_256x240Png,
	"static/vendor/jquery-ui/themes/smoothness/jquery-ui.css": staticVendorJqueryUiThemesSmoothnessJqueryUiCss,
	"static/vendor/jquery-ui/themes/smoothness/jquery-ui.min.css": staticVendorJqueryUiThemesSmoothnessJqueryUiMinCss,
	"static/vendor/jquery-ui/themes/smoothness/theme.css": staticVendorJqueryUiThemesSmoothnessThemeCss,
	"static/vendor/jquery-ui/ui/accordion.js": staticVendorJqueryUiUiAccordionJs,
	"static/vendor/jquery-ui/ui/autocomplete.js": staticVendorJqueryUiUiAutocompleteJs,
	"static/vendor/jquery-ui/ui/button.js": staticVendorJqueryUiUiButtonJs,
	"static/vendor/jquery-ui/ui/core.js": staticVendorJqueryUiUiCoreJs,
	"static/vendor/jquery-ui/ui/datepicker.js": staticVendorJqueryUiUiDatepickerJs,
	"static/vendor/jquery-ui/ui/dialog.js": staticVendorJqueryUiUiDialogJs,
	"static/vendor/jquery-ui/ui/draggable.js": staticVendorJqueryUiUiDraggableJs,
	"static/vendor/jquery-ui/ui/droppable.js": staticVendorJqueryUiUiDroppableJs,
	"static/vendor/jquery-ui/ui/effect-blind.js": staticVendorJqueryUiUiEffectBlindJs,
	"static/vendor/jquery-ui/ui/effect-bounce.js": staticVendorJqueryUiUiEffectBounceJs,
	"static/vendor/jquery-ui/ui/effect-clip.js": staticVendorJqueryUiUiEffectClipJs,
	"static/vendor/jquery-ui/ui/effect-drop.js": staticVendorJqueryUiUiEffectDropJs,
	"static/vendor/jquery-ui/ui/effect-explode.js": staticVendorJqueryUiUiEffectExplodeJs,
	"static/vendor/jquery-ui/ui/effect-fade.js": staticVendorJqueryUiUiEffectFadeJs,
	"static/vendor/jquery-ui/ui/effect-fold.js": staticVendorJqueryUiUiEffectFoldJs,
	"static/vendor/jquery-ui/ui/effect-highlight.js": staticVendorJqueryUiUiEffectHighlightJs,
	"static/vendor/jquery-ui/ui/effect-puff.js": staticVendorJqueryUiUiEffectPuffJs,
	"static/vendor/jquery-ui/ui/effect-pulsate.js": staticVendorJqueryUiUiEffectPulsateJs,
	"static/vendor/jquery-ui/ui/effect-scale.js": staticVendorJqueryUiUiEffectScaleJs,
	"static/vendor/jquery-ui/ui/effect-shake.js": staticVendorJqueryUiUiEffectShakeJs,
	"static/vendor/jquery-ui/ui/effect-size.js": staticVendorJqueryUiUiEffectSizeJs,
	"static/vendor/jquery-ui/ui/effect-slide.js": staticVendorJqueryUiUiEffectSlideJs,
	"static/vendor/jquery-ui/ui/effect-transfer.js": staticVendorJqueryUiUiEffectTransferJs,
	"static/vendor/jquery-ui/ui/effect.js": staticVendorJqueryUiUiEffectJs,
	"static/vendor/jquery-ui/ui/menu.js": staticVendorJqueryUiUiMenuJs,
	"static/vendor/jquery-ui/ui/mouse.js": staticVendorJqueryUiUiMouseJs,
	"static/vendor/jquery-ui/ui/position.js": staticVendorJqueryUiUiPositionJs,
	"static/vendor/jquery-ui/ui/progressbar.js": staticVendorJqueryUiUiProgressbarJs,
	"static/vendor/jquery-ui/ui/resizable.js": staticVendorJqueryUiUiResizableJs,
	"static/vendor/jquery-ui/ui/selectable.js": staticVendorJqueryUiUiSelectableJs,
	"static/vendor/jquery-ui/ui/selectmenu.js": staticVendorJqueryUiUiSelectmenuJs,
	"static/vendor/jquery-ui/ui/slider.js": staticVendorJqueryUiUiSliderJs,
	"static/vendor/jquery-ui/ui/sortable.js": staticVendorJqueryUiUiSortableJs,
	"static/vendor/jquery-ui/ui/spinner.js": staticVendorJqueryUiUiSpinnerJs,
	"static/vendor/jquery-ui/ui/tabs.js": staticVendorJqueryUiUiTabsJs,
	"static/vendor/jquery-ui/ui/tooltip.js": staticVendorJqueryUiUiTooltipJs,
	"static/vendor/jquery-ui/ui/widget.js": staticVendorJqueryUiUiWidgetJs,
	"static/vendor/jquery-validation/dist/jquery.validate.js": staticVendorJqueryValidationDistJqueryValidateJs,
	"static/vendor/jquery.easing/js/jquery.easing.js": staticVendorJqueryEasingJsJqueryEasingJs,
	"static/vendor/jquery.easy-pie-chart/dist/jquery.easypiechart.js": staticVendorJqueryEasyPieChartDistJqueryEasypiechartJs,
	"static/vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js": staticVendorJqueryInputmaskDistJqueryInputmaskBundleJs,
	"static/vendor/jquery.steps/build/jquery.steps.js": staticVendorJqueryStepsBuildJqueryStepsJs,
	"static/vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js": staticVendorJqueryuiTouchPunchJqueryUiTouchPunchMinJs,
	"static/vendor/loaders.css/loaders.css": staticVendorLoadersCssLoadersCss,
	"static/vendor/matchMedia/matchMedia.js": staticVendorMatchmediaMatchmediaJs,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/css/bootstrap-colorpicker.css": staticVendorMjolnicBootstrapColorpickerDistCssBootstrapColorpickerCss,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha-horizontal.png": staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaHorizontalPng,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/alpha.png": staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaPng,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue-horizontal.png": staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHueHorizontalPng,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/hue.png": staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHuePng,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/img/bootstrap-colorpicker/saturation.png": staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerSaturationPng,
	"static/vendor/mjolnic-bootstrap-colorpicker/dist/js/bootstrap-colorpicker.js": staticVendorMjolnicBootstrapColorpickerDistJsBootstrapColorpickerJs,
	"static/vendor/modernizr/modernizr.custom.js": staticVendorModernizrModernizrCustomJs,
	"static/vendor/moment/min/moment-with-locales.min.js": staticVendorMomentMinMomentWithLocalesMinJs,
	"static/vendor/morris.js/morris.css": staticVendorMorrisJsMorrisCss,
	"static/vendor/morris.js/morris.js": staticVendorMorrisJsMorrisJs,
	"static/vendor/nestable/jquery.nestable.js": staticVendorNestableJqueryNestableJs,
	"static/vendor/parsleyjs/dist/parsley.min.js": staticVendorParsleyjsDistParsleyMinJs,
	"static/vendor/raphael/raphael.js": staticVendorRaphaelRaphaelJs,
	"static/vendor/rickshaw/rickshaw.js": staticVendorRickshawRickshawJs,
	"static/vendor/rickshaw/rickshaw.min.css": staticVendorRickshawRickshawMinCss,
	"static/vendor/screenfull/dist/screenfull.js": staticVendorScreenfullDistScreenfullJs,
	"static/vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js": staticVendorSeiyriaBootstrapSliderDistBootstrapSliderMinJs,
	"static/vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css": staticVendorSeiyriaBootstrapSliderDistCssBootstrapSliderMinCss,
	"static/vendor/select2/dist/css/select2.css": staticVendorSelect2DistCssSelect2Css,
	"static/vendor/select2/dist/js/select2.js": staticVendorSelect2DistJsSelect2Js,
	"static/vendor/select2-bootstrap-theme/dist/select2-bootstrap.css": staticVendorSelect2BootstrapThemeDistSelect2BootstrapCss,
	"static/vendor/simple-line-icons/css/simple-line-icons.css": staticVendorSimpleLineIconsCssSimpleLineIconsCss,
	"static/vendor/simple-line-icons/fonts/Simple-Line-Icons.eot": staticVendorSimpleLineIconsFontsSimpleLineIconsEot,
	"static/vendor/simple-line-icons/fonts/Simple-Line-Icons.svg": staticVendorSimpleLineIconsFontsSimpleLineIconsSvg,
	"static/vendor/simple-line-icons/fonts/Simple-Line-Icons.ttf": staticVendorSimpleLineIconsFontsSimpleLineIconsTtf,
	"static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff": staticVendorSimpleLineIconsFontsSimpleLineIconsWoff,
	"static/vendor/simple-line-icons/fonts/Simple-Line-Icons.woff2": staticVendorSimpleLineIconsFontsSimpleLineIconsWoff2,
	"static/vendor/skycons/skycons.js": staticVendorSkyconsSkyconsJs,
	"static/vendor/slimScroll/jquery.slimscroll.min.js": staticVendorSlimscrollJquerySlimscrollMinJs,
	"static/vendor/sparkline/index.js": staticVendorSparklineIndexJs,
	"static/vendor/spinkit/css/spinkit.css": staticVendorSpinkitCssSpinkitCss,
	"static/vendor/sweetalert/dist/sweetalert.css": staticVendorSweetalertDistSweetalertCss,
	"static/vendor/sweetalert/dist/sweetalert.min.js": staticVendorSweetalertDistSweetalertMinJs,
	"static/vendor/weather-icons/css/weather-icons-wind.min.css": staticVendorWeatherIconsCssWeatherIconsWindMinCss,
	"static/vendor/weather-icons/css/weather-icons.min.css": staticVendorWeatherIconsCssWeatherIconsMinCss,
	"static/vendor/weather-icons/font/weathericons-regular-webfont.eot": staticVendorWeatherIconsFontWeathericonsRegularWebfontEot,
	"static/vendor/weather-icons/font/weathericons-regular-webfont.svg": staticVendorWeatherIconsFontWeathericonsRegularWebfontSvg,
	"static/vendor/weather-icons/font/weathericons-regular-webfont.ttf": staticVendorWeatherIconsFontWeathericonsRegularWebfontTtf,
	"static/vendor/weather-icons/font/weathericons-regular-webfont.woff": staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff,
	"static/vendor/weather-icons/font/weathericons-regular-webfont.woff2": staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff2,
	"static/vendor/whirl/dist/whirl.css": staticVendorWhirlDistWhirlCss,
	"static/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css": staticVendorXEditableDistBootstrap3EditableCssBootstrapEditableCss,
	"static/vendor/x-editable/dist/bootstrap3-editable/img/clear.png": staticVendorXEditableDistBootstrap3EditableImgClearPng,
	"static/vendor/x-editable/dist/bootstrap3-editable/img/loading.gif": staticVendorXEditableDistBootstrap3EditableImgLoadingGif,
	"static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js": staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableJs,
	"static/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.min.js": staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableMinJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"1block": &bintree{static1block, map[string]*bintree{
		}},
		"alert_success.html": &bintree{staticAlert_successHtml, map[string]*bintree{
		}},
		"anonym_history.html": &bintree{staticAnonym_historyHtml, map[string]*bintree{
		}},
		"anonym_money_transfer.html": &bintree{staticAnonym_money_transferHtml, map[string]*bintree{
		}},
		"change_node_key.html": &bintree{staticChange_node_keyHtml, map[string]*bintree{
		}},
		"citizen_bill_payment.html": &bintree{staticCitizen_bill_paymentHtml, map[string]*bintree{
		}},
		"citizen_marriage_registration.html": &bintree{staticCitizen_marriage_registrationHtml, map[string]*bintree{
		}},
		"citizen_property.html": &bintree{staticCitizen_propertyHtml, map[string]*bintree{
		}},
		"citizen_rule_details.html": &bintree{staticCitizen_rule_detailsHtml, map[string]*bintree{
		}},
		"company_application_purchase.html": &bintree{staticCompany_application_purchaseHtml, map[string]*bintree{
		}},
		"company_contract.html": &bintree{staticCompany_contractHtml, map[string]*bintree{
		}},
		"company_currency_exchange.html": &bintree{staticCompany_currency_exchangeHtml, map[string]*bintree{
		}},
		"company_new_good.html": &bintree{staticCompany_new_goodHtml, map[string]*bintree{
		}},
		"company_new_item.html": &bintree{staticCompany_new_itemHtml, map[string]*bintree{
		}},
		"company_offer_seller.html": &bintree{staticCompany_offer_sellerHtml, map[string]*bintree{
		}},
		"company_offer_transport.html": &bintree{staticCompany_offer_transportHtml, map[string]*bintree{
		}},
		"company_select_transport.html": &bintree{staticCompany_select_transportHtml, map[string]*bintree{
		}},
		"company_shares.html": &bintree{staticCompany_sharesHtml, map[string]*bintree{
		}},
		"company_shares_exchange.html": &bintree{staticCompany_shares_exchangeHtml, map[string]*bintree{
		}},
		"company_smart_contracts.html": &bintree{staticCompany_smart_contractsHtml, map[string]*bintree{
		}},
		"css": &bintree{nil, map[string]*bintree{
			"app.css": &bintree{staticCssAppCss, map[string]*bintree{
			}},
			"bootstrap.css": &bintree{staticCssBootstrapCss, map[string]*bintree{
			}},
			"style.css": &bintree{staticCssStyleCss, map[string]*bintree{
			}},
			"theme-a.css": &bintree{staticCssThemeACss, map[string]*bintree{
			}},
			"theme-b.css": &bintree{staticCssThemeBCss, map[string]*bintree{
			}},
			"theme-c.css": &bintree{staticCssThemeCCss, map[string]*bintree{
			}},
			"theme-d.css": &bintree{staticCssThemeDCss, map[string]*bintree{
			}},
			"theme-e.css": &bintree{staticCssThemeECss, map[string]*bintree{
			}},
			"theme-f.css": &bintree{staticCssThemeFCss, map[string]*bintree{
			}},
			"theme-g.css": &bintree{staticCssThemeGCss, map[string]*bintree{
			}},
			"theme-h.css": &bintree{staticCssThemeHCss, map[string]*bintree{
			}},
		}},
		"dashboard_anonym.html": &bintree{staticDashboard_anonymHtml, map[string]*bintree{
		}},
		"dashboard_cb.html": &bintree{staticDashboard_cbHtml, map[string]*bintree{
		}},
		"dashboard_citizen.html": &bintree{staticDashboard_citizenHtml, map[string]*bintree{
		}},
		"dashboard_company.html": &bintree{staticDashboard_companyHtml, map[string]*bintree{
		}},
		"dashboard_gov.html": &bintree{staticDashboard_govHtml, map[string]*bintree{
		}},
		"dashboard_health.html": &bintree{staticDashboard_healthHtml, map[string]*bintree{
		}},
		"data": &bintree{nil, map[string]*bintree{
			"entries_doctor.json": &bintree{staticDataEntries_doctorJson, map[string]*bintree{
			}},
			"immunizations.json": &bintree{staticDataImmunizationsJson, map[string]*bintree{
			}},
			"medication.json": &bintree{staticDataMedicationJson, map[string]*bintree{
			}},
			"patients.json": &bintree{staticDataPatientsJson, map[string]*bintree{
			}},
		}},
		"entrance.html": &bintree{staticEntranceHtml, map[string]*bintree{
		}},
		"gov_citizens.html": &bintree{staticGov_citizensHtml, map[string]*bintree{
		}},
		"gov_currency_exchange.html": &bintree{staticGov_currency_exchangeHtml, map[string]*bintree{
		}},
		"gov_shares_exchange.html": &bintree{staticGov_shares_exchangeHtml, map[string]*bintree{
		}},
		"health_buy_medicament.html": &bintree{staticHealth_buy_medicamentHtml, map[string]*bintree{
		}},
		"health_facility.html": &bintree{staticHealth_facilityHtml, map[string]*bintree{
		}},
		"health_immunization_records.html": &bintree{staticHealth_immunization_recordsHtml, map[string]*bintree{
		}},
		"health_medical_record.html": &bintree{staticHealth_medical_recordHtml, map[string]*bintree{
		}},
		"health_medication_records.html": &bintree{staticHealth_medication_recordsHtml, map[string]*bintree{
		}},
		"health_patient.html": &bintree{staticHealth_patientHtml, map[string]*bintree{
		}},
		"i18n": &bintree{nil, map[string]*bintree{
			"site-en.json": &bintree{staticI18nSiteEnJson, map[string]*bintree{
			}},
			"site-es.json": &bintree{staticI18nSiteEsJson, map[string]*bintree{
			}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"QR.png": &bintree{staticImgQrPng, map[string]*bintree{
			}},
			"Thumbs.db": &bintree{staticImgThumbsDb, map[string]*bintree{
			}},
			"US.svg": &bintree{staticImgUsSvg, map[string]*bintree{
			}},
			"bg1.jpg": &bintree{staticImgBg1Jpg, map[string]*bintree{
			}},
			"bg10.jpg": &bintree{staticImgBg10Jpg, map[string]*bintree{
			}},
			"bg2.jpg": &bintree{staticImgBg2Jpg, map[string]*bintree{
			}},
			"bg3.jpg": &bintree{staticImgBg3Jpg, map[string]*bintree{
			}},
			"bg4.jpg": &bintree{staticImgBg4Jpg, map[string]*bintree{
			}},
			"bg5.jpg": &bintree{staticImgBg5Jpg, map[string]*bintree{
			}},
			"bg6.jpg": &bintree{staticImgBg6Jpg, map[string]*bintree{
			}},
			"bg7.jpg": &bintree{staticImgBg7Jpg, map[string]*bintree{
			}},
			"bg8.jpg": &bintree{staticImgBg8Jpg, map[string]*bintree{
			}},
			"bg9.jpg": &bintree{staticImgBg9Jpg, map[string]*bintree{
			}},
			"dummy.png": &bintree{staticImgDummyPng, map[string]*bintree{
			}},
			"lock-bg.jpg": &bintree{staticImgLockBgJpg, map[string]*bintree{
			}},
			"logo-single.png": &bintree{staticImgLogoSinglePng, map[string]*bintree{
			}},
			"logo.png": &bintree{staticImgLogoPng, map[string]*bintree{
			}},
			"mb-sample.jpg": &bintree{staticImgMbSampleJpg, map[string]*bintree{
			}},
			"mockup.png": &bintree{staticImgMockupPng, map[string]*bintree{
			}},
			"profile-bg.jpg": &bintree{staticImgProfileBgJpg, map[string]*bintree{
			}},
			"radio_icon.png": &bintree{staticImgRadio_iconPng, map[string]*bintree{
			}},
			"user": &bintree{nil, map[string]*bintree{
				"01.jpg": &bintree{staticImgUser01Jpg, map[string]*bintree{
				}},
				"02.jpg": &bintree{staticImgUser02Jpg, map[string]*bintree{
				}},
				"03.jpg": &bintree{staticImgUser03Jpg, map[string]*bintree{
				}},
				"04.jpg": &bintree{staticImgUser04Jpg, map[string]*bintree{
				}},
				"05.jpg": &bintree{staticImgUser05Jpg, map[string]*bintree{
				}},
				"06.jpg": &bintree{staticImgUser06Jpg, map[string]*bintree{
				}},
				"07.jpg": &bintree{staticImgUser07Jpg, map[string]*bintree{
				}},
				"08.jpg": &bintree{staticImgUser08Jpg, map[string]*bintree{
				}},
				"09.jpg": &bintree{staticImgUser09Jpg, map[string]*bintree{
				}},
				"10.jpg": &bintree{staticImgUser10Jpg, map[string]*bintree{
				}},
				"11.jpg": &bintree{staticImgUser11Jpg, map[string]*bintree{
				}},
				"12.jpg": &bintree{staticImgUser12Jpg, map[string]*bintree{
				}},
				"13.jpg": &bintree{staticImgUser13Jpg, map[string]*bintree{
				}},
				"Thumbs.db": &bintree{staticImgUserThumbsDb, map[string]*bintree{
				}},
			}},
		}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{
		}},
		"install_step_0.html": &bintree{staticInstall_step_0Html, map[string]*bintree{
		}},
		"install_step_1.html": &bintree{staticInstall_step_1Html, map[string]*bintree{
		}},
		"js": &bintree{nil, map[string]*bintree{
			"app.js": &bintree{staticJsAppJs, map[string]*bintree{
			}},
			"asn1hex-1.1.min.js": &bintree{staticJsAsn1hex11MinJs, map[string]*bintree{
			}},
			"base64.js": &bintree{staticJsBase64Js, map[string]*bintree{
			}},
			"clipboard.js": &bintree{staticJsClipboardJs, map[string]*bintree{
			}},
			"crypto": &bintree{nil, map[string]*bintree{
				"asn1-1.0.min.js": &bintree{staticJsCryptoAsn110MinJs, map[string]*bintree{
				}},
				"asn1hex-1.1.min.js": &bintree{staticJsCryptoAsn1hex11MinJs, map[string]*bintree{
				}},
				"crypto-1.1.min.js": &bintree{staticJsCryptoCrypto11MinJs, map[string]*bintree{
				}},
				"ecdsa-modified-1.0.min.js": &bintree{staticJsCryptoEcdsaModified10MinJs, map[string]*bintree{
				}},
				"ecparam-1.0.min.js": &bintree{staticJsCryptoEcparam10MinJs, map[string]*bintree{
				}},
				"ext": &bintree{nil, map[string]*bintree{
					"cj": &bintree{nil, map[string]*bintree{
						"aes.js": &bintree{staticJsCryptoExtCjAesJs, map[string]*bintree{
						}},
						"cryptojs-312-core-fix-min.js": &bintree{staticJsCryptoExtCjCryptojs312CoreFixMinJs, map[string]*bintree{
						}},
						"ec-patch-min.js": &bintree{staticJsCryptoExtCjEcPatchMinJs, map[string]*bintree{
						}},
						"md5_min.js": &bintree{staticJsCryptoExtCjMd5_minJs, map[string]*bintree{
						}},
						"sha1_min.js": &bintree{staticJsCryptoExtCjSha1_minJs, map[string]*bintree{
						}},
						"sha256_min.js": &bintree{staticJsCryptoExtCjSha256_minJs, map[string]*bintree{
						}},
						"x64-core_min.js": &bintree{staticJsCryptoExtCjX64Core_minJs, map[string]*bintree{
						}},
					}},
					"ec-min.js": &bintree{staticJsCryptoExtEcMinJs, map[string]*bintree{
					}},
					"ec-patch-min.js": &bintree{staticJsCryptoExtEcPatchMinJs, map[string]*bintree{
					}},
					"jsbn-min.js": &bintree{staticJsCryptoExtJsbnMinJs, map[string]*bintree{
					}},
					"jsbn2-min.js": &bintree{staticJsCryptoExtJsbn2MinJs, map[string]*bintree{
					}},
					"prng4-min.js": &bintree{staticJsCryptoExtPrng4MinJs, map[string]*bintree{
					}},
					"rng-min.js": &bintree{staticJsCryptoExtRngMinJs, map[string]*bintree{
					}},
					"yahoo-min.js": &bintree{staticJsCryptoExtYahooMinJs, map[string]*bintree{
					}},
				}},
			}},
			"datetime.js": &bintree{staticJsDatetimeJs, map[string]*bintree{
			}},
			"demo": &bintree{nil, map[string]*bintree{
				"demo-datatable.js": &bintree{staticJsDemoDemoDatatableJs, map[string]*bintree{
				}},
				"demo-flot.js": &bintree{staticJsDemoDemoFlotJs, map[string]*bintree{
				}},
				"demo-forms.js": &bintree{staticJsDemoDemoFormsJs, map[string]*bintree{
				}},
				"demo-jqcloud.js": &bintree{staticJsDemoDemoJqcloudJs, map[string]*bintree{
				}},
				"demo-jqgrid.js": &bintree{staticJsDemoDemoJqgridJs, map[string]*bintree{
				}},
				"demo-nestable.js": &bintree{staticJsDemoDemoNestableJs, map[string]*bintree{
				}},
				"demo-panels.js": &bintree{staticJsDemoDemoPanelsJs, map[string]*bintree{
				}},
				"demo-rtl.js": &bintree{staticJsDemoDemoRtlJs, map[string]*bintree{
				}},
				"demo-search.js": &bintree{staticJsDemoDemoSearchJs, map[string]*bintree{
				}},
				"demo-sortable.js": &bintree{staticJsDemoDemoSortableJs, map[string]*bintree{
				}},
				"demo-upload.js": &bintree{staticJsDemoDemoUploadJs, map[string]*bintree{
				}},
				"demo-vector-map.js": &bintree{staticJsDemoDemoVectorMapJs, map[string]*bintree{
				}},
				"demo-wizard.js": &bintree{staticJsDemoDemoWizardJs, map[string]*bintree{
				}},
				"demo-xeditable.js": &bintree{staticJsDemoDemoXeditableJs, map[string]*bintree{
				}},
			}},
			"index.js": &bintree{staticJsIndexJs, map[string]*bintree{
			}},
			"jsbn.js": &bintree{staticJsJsbnJs, map[string]*bintree{
			}},
			"jsbn2.js": &bintree{staticJsJsbn2Js, map[string]*bintree{
			}},
			"md5.js": &bintree{staticJsMd5Js, map[string]*bintree{
			}},
			"rsa.js": &bintree{staticJsRsaJs, map[string]*bintree{
			}},
			"rsa2.js": &bintree{staticJsRsa2Js, map[string]*bintree{
			}},
			"rsapem-1.1.js": &bintree{staticJsRsapem11Js, map[string]*bintree{
			}},
			"rsasign-1.2.min.js": &bintree{staticJsRsasign12MinJs, map[string]*bintree{
			}},
			"send_to_net.js": &bintree{staticJsSend_to_netJs, map[string]*bintree{
			}},
			"sha1.js": &bintree{staticJsSha1Js, map[string]*bintree{
			}},
			"sha256.js": &bintree{staticJsSha256Js, map[string]*bintree{
			}},
			"spin.js": &bintree{staticJsSpinJs, map[string]*bintree{
			}},
		}},
		"lang": &bintree{nil, map[string]*bintree{
			"1.ini": &bintree{staticLang1Ini, map[string]*bintree{
			}},
			"42.ini": &bintree{staticLang42Ini, map[string]*bintree{
			}},
			"en-us.all.json": &bintree{staticLangEnUsAllJson, map[string]*bintree{
			}},
			"locale_en-US.ini": &bintree{staticLangLocale_enUsIni, map[string]*bintree{
			}},
			"locale_ru-RU.ini": &bintree{staticLangLocale_ruRuIni, map[string]*bintree{
			}},
		}},
		"login.html": &bintree{staticLoginHtml, map[string]*bintree{
		}},
		"menu.html": &bintree{staticMenuHtml, map[string]*bintree{
		}},
		"modal_anonym.html": &bintree{staticModal_anonymHtml, map[string]*bintree{
		}},
		"modal_cb.html": &bintree{staticModal_cbHtml, map[string]*bintree{
		}},
		"modal_citizen.html": &bintree{staticModal_citizenHtml, map[string]*bintree{
		}},
		"modal_company.html": &bintree{staticModal_companyHtml, map[string]*bintree{
		}},
		"modal_gov.html": &bintree{staticModal_govHtml, map[string]*bintree{
		}},
		"modal_health.html": &bintree{staticModal_healthHtml, map[string]*bintree{
		}},
		"pass.html": &bintree{staticPassHtml, map[string]*bintree{
		}},
		"sass": &bintree{nil, map[string]*bintree{
			"_colors.scss": &bintree{staticSass_colorsScss, map[string]*bintree{
			}},
			"_mixins.scss": &bintree{staticSass_mixinsScss, map[string]*bintree{
			}},
			"style.scss": &bintree{staticSassStyleScss, map[string]*bintree{
			}},
		}},
		"signatures.html": &bintree{staticSignaturesHtml, map[string]*bintree{
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"login.html": &bintree{staticTemplatesLoginHtml, map[string]*bintree{
			}},
			"modal.html": &bintree{staticTemplatesModalHtml, map[string]*bintree{
			}},
		}},
		"test.html": &bintree{staticTestHtml, map[string]*bintree{
		}},
		"updating_blockchain.html": &bintree{staticUpdating_blockchainHtml, map[string]*bintree{
		}},
		"vendor": &bintree{nil, map[string]*bintree{
			"Chart.js": &bintree{nil, map[string]*bintree{
				"Chart.js": &bintree{staticVendorChartJsChartJs, map[string]*bintree{
				}},
			}},
			"Flot": &bintree{nil, map[string]*bintree{
				"jquery.flot.categories.js": &bintree{staticVendorFlotJqueryFlotCategoriesJs, map[string]*bintree{
				}},
				"jquery.flot.js": &bintree{staticVendorFlotJqueryFlotJs, map[string]*bintree{
				}},
				"jquery.flot.pie.js": &bintree{staticVendorFlotJqueryFlotPieJs, map[string]*bintree{
				}},
				"jquery.flot.resize.js": &bintree{staticVendorFlotJqueryFlotResizeJs, map[string]*bintree{
				}},
				"jquery.flot.time.js": &bintree{staticVendorFlotJqueryFlotTimeJs, map[string]*bintree{
				}},
			}},
			"animate.css": &bintree{nil, map[string]*bintree{
				"animate.min.css": &bintree{staticVendorAnimateCssAnimateMinCss, map[string]*bintree{
				}},
			}},
			"animo.js": &bintree{nil, map[string]*bintree{
				"animo.js": &bintree{staticVendorAnimoJsAnimoJs, map[string]*bintree{
				}},
			}},
			"blueimp-canvas-to-blob": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"canvas-to-blob.js": &bintree{staticVendorBlueimpCanvasToBlobJsCanvasToBlobJs, map[string]*bintree{
					}},
				}},
			}},
			"blueimp-file-upload": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"jquery.fileupload.css": &bintree{staticVendorBlueimpFileUploadCssJqueryFileuploadCss, map[string]*bintree{
					}},
				}},
				"img": &bintree{nil, map[string]*bintree{
					"loading.gif": &bintree{staticVendorBlueimpFileUploadImgLoadingGif, map[string]*bintree{
					}},
					"progressbar.gif": &bintree{staticVendorBlueimpFileUploadImgProgressbarGif, map[string]*bintree{
					}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"jquery.fileupload-angular.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadAngularJs, map[string]*bintree{
					}},
					"jquery.fileupload-audio.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadAudioJs, map[string]*bintree{
					}},
					"jquery.fileupload-image.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadImageJs, map[string]*bintree{
					}},
					"jquery.fileupload-jquery-ui.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadJqueryUiJs, map[string]*bintree{
					}},
					"jquery.fileupload-process.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadProcessJs, map[string]*bintree{
					}},
					"jquery.fileupload-ui.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadUiJs, map[string]*bintree{
					}},
					"jquery.fileupload-validate.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadValidateJs, map[string]*bintree{
					}},
					"jquery.fileupload-video.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadVideoJs, map[string]*bintree{
					}},
					"jquery.fileupload.js": &bintree{staticVendorBlueimpFileUploadJsJqueryFileuploadJs, map[string]*bintree{
					}},
					"jquery.iframe-transport.js": &bintree{staticVendorBlueimpFileUploadJsJqueryIframeTransportJs, map[string]*bintree{
					}},
				}},
			}},
			"blueimp-load-image": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"load-image.all.min.js": &bintree{staticVendorBlueimpLoadImageJsLoadImageAllMinJs, map[string]*bintree{
					}},
				}},
			}},
			"blueimp-tmpl": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"tmpl.js": &bintree{staticVendorBlueimpTmplJsTmplJs, map[string]*bintree{
					}},
				}},
			}},
			"bootstrap": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap.css": &bintree{staticVendorBootstrapDistCssBootstrapCss, map[string]*bintree{
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"bootstrap.js": &bintree{staticVendorBootstrapDistJsBootstrapJs, map[string]*bintree{
						}},
					}},
				}},
			}},
			"bootstrap-filestyle": &bintree{nil, map[string]*bintree{
				"src": &bintree{nil, map[string]*bintree{
					"bootstrap-filestyle.js": &bintree{staticVendorBootstrapFilestyleSrcBootstrapFilestyleJs, map[string]*bintree{
					}},
				}},
			}},
			"bootstrap-tagsinput": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"bootstrap-tagsinput.css": &bintree{staticVendorBootstrapTagsinputDistBootstrapTagsinputCss, map[string]*bintree{
					}},
					"bootstrap-tagsinput.min.js": &bintree{staticVendorBootstrapTagsinputDistBootstrapTagsinputMinJs, map[string]*bintree{
					}},
				}},
			}},
			"bootstrap-tour": &bintree{nil, map[string]*bintree{
				"build": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap-tour-standalone.css": &bintree{staticVendorBootstrapTourBuildCssBootstrapTourStandaloneCss, map[string]*bintree{
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"bootstrap-tour-standalone.js": &bintree{staticVendorBootstrapTourBuildJsBootstrapTourStandaloneJs, map[string]*bintree{
						}},
					}},
				}},
			}},
			"bootstrap-wysiwyg": &bintree{nil, map[string]*bintree{
				"bootstrap-wysiwyg.js": &bintree{staticVendorBootstrapWysiwygBootstrapWysiwygJs, map[string]*bintree{
				}},
				"external": &bintree{nil, map[string]*bintree{
					"jquery.hotkeys.js": &bintree{staticVendorBootstrapWysiwygExternalJqueryHotkeysJs, map[string]*bintree{
					}},
				}},
			}},
			"chartist": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"chartist.js": &bintree{staticVendorChartistDistChartistJs, map[string]*bintree{
					}},
					"chartist.min.css": &bintree{staticVendorChartistDistChartistMinCss, map[string]*bintree{
					}},
				}},
			}},
			"chosen_v1.2.0": &bintree{nil, map[string]*bintree{
				"chosen-sprite.png": &bintree{staticVendorChosen_v120ChosenSpritePng, map[string]*bintree{
				}},
				"chosen-sprite@2x.png": &bintree{staticVendorChosen_v120ChosenSprite2xPng, map[string]*bintree{
				}},
				"chosen.jquery.min.js": &bintree{staticVendorChosen_v120ChosenJqueryMinJs, map[string]*bintree{
				}},
				"chosen.min.css": &bintree{staticVendorChosen_v120ChosenMinCss, map[string]*bintree{
				}},
			}},
			"cropper": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"cropper.css": &bintree{staticVendorCropperDistCropperCss, map[string]*bintree{
					}},
					"cropper.js": &bintree{staticVendorCropperDistCropperJs, map[string]*bintree{
					}},
				}},
			}},
			"d3": &bintree{nil, map[string]*bintree{
				"d3.min.js": &bintree{staticVendorD3D3MinJs, map[string]*bintree{
				}},
			}},
			"dataTables.fontAwesome": &bintree{nil, map[string]*bintree{
				"index.css": &bintree{staticVendorDatatablesFontawesomeIndexCss, map[string]*bintree{
				}},
			}},
			"datatables": &bintree{nil, map[string]*bintree{
				"media": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"dataTables.bootstrap.css": &bintree{staticVendorDatatablesMediaCssDatatablesBootstrapCss, map[string]*bintree{
						}},
					}},
					"images": &bintree{nil, map[string]*bintree{
						"Sorting icons.psd": &bintree{staticVendorDatatablesMediaImagesSortingIconsPsd, map[string]*bintree{
						}},
						"favicon.ico": &bintree{staticVendorDatatablesMediaImagesFaviconIco, map[string]*bintree{
						}},
						"sort_asc.png": &bintree{staticVendorDatatablesMediaImagesSort_ascPng, map[string]*bintree{
						}},
						"sort_asc_disabled.png": &bintree{staticVendorDatatablesMediaImagesSort_asc_disabledPng, map[string]*bintree{
						}},
						"sort_both.png": &bintree{staticVendorDatatablesMediaImagesSort_bothPng, map[string]*bintree{
						}},
						"sort_desc.png": &bintree{staticVendorDatatablesMediaImagesSort_descPng, map[string]*bintree{
						}},
						"sort_desc_disabled.png": &bintree{staticVendorDatatablesMediaImagesSort_desc_disabledPng, map[string]*bintree{
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"dataTables.bootstrap.js": &bintree{staticVendorDatatablesMediaJsDatatablesBootstrapJs, map[string]*bintree{
						}},
						"jquery.dataTables.min.js": &bintree{staticVendorDatatablesMediaJsJqueryDatatablesMinJs, map[string]*bintree{
						}},
					}},
				}},
			}},
			"datatables-colvis": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"dataTables.colVis.css": &bintree{staticVendorDatatablesColvisCssDatatablesColvisCss, map[string]*bintree{
					}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"dataTables.colVis.js": &bintree{staticVendorDatatablesColvisJsDatatablesColvisJs, map[string]*bintree{
					}},
				}},
			}},
			"eonasdan-bootstrap-datetimepicker": &bintree{nil, map[string]*bintree{
				"build": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap-datetimepicker.min.css": &bintree{staticVendorEonasdanBootstrapDatetimepickerBuildCssBootstrapDatetimepickerMinCss, map[string]*bintree{
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"bootstrap-datetimepicker.min.js": &bintree{staticVendorEonasdanBootstrapDatetimepickerBuildJsBootstrapDatetimepickerMinJs, map[string]*bintree{
						}},
					}},
				}},
			}},
			"fastclick": &bintree{nil, map[string]*bintree{
				"lib": &bintree{nil, map[string]*bintree{
					"fastclick.js": &bintree{staticVendorFastclickLibFastclickJs, map[string]*bintree{
					}},
				}},
			}},
			"flatdoc": &bintree{nil, map[string]*bintree{
				"flatdoc.js": &bintree{staticVendorFlatdocFlatdocJs, map[string]*bintree{
				}},
			}},
			"flot-spline": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.flot.spline.min.js": &bintree{staticVendorFlotSplineJsJqueryFlotSplineMinJs, map[string]*bintree{
					}},
				}},
			}},
			"flot.tooltip": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.flot.tooltip.min.js": &bintree{staticVendorFlotTooltipJsJqueryFlotTooltipMinJs, map[string]*bintree{
					}},
				}},
			}},
			"fontawesome": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"font-awesome.min.css": &bintree{staticVendorFontawesomeCssFontAwesomeMinCss, map[string]*bintree{
					}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"FontAwesome.otf": &bintree{staticVendorFontawesomeFontsFontawesomeOtf, map[string]*bintree{
					}},
					"fontawesome-webfont.eot": &bintree{staticVendorFontawesomeFontsFontawesomeWebfontEot, map[string]*bintree{
					}},
					"fontawesome-webfont.svg": &bintree{staticVendorFontawesomeFontsFontawesomeWebfontSvg, map[string]*bintree{
					}},
					"fontawesome-webfont.ttf": &bintree{staticVendorFontawesomeFontsFontawesomeWebfontTtf, map[string]*bintree{
					}},
					"fontawesome-webfont.woff": &bintree{staticVendorFontawesomeFontsFontawesomeWebfontWoff, map[string]*bintree{
					}},
					"fontawesome-webfont.woff2": &bintree{staticVendorFontawesomeFontsFontawesomeWebfontWoff2, map[string]*bintree{
					}},
				}},
			}},
			"fullcalendar": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"fullcalendar.css": &bintree{staticVendorFullcalendarDistFullcalendarCss, map[string]*bintree{
					}},
					"fullcalendar.min.js": &bintree{staticVendorFullcalendarDistFullcalendarMinJs, map[string]*bintree{
					}},
					"gcal.js": &bintree{staticVendorFullcalendarDistGcalJs, map[string]*bintree{
					}},
				}},
			}},
			"html.sortable": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"html.sortable.js": &bintree{staticVendorHtmlSortableDistHtmlSortableJs, map[string]*bintree{
					}},
				}},
			}},
			"ika.jvectormap": &bintree{nil, map[string]*bintree{
				"jquery-jvectormap-1.2.2.css": &bintree{staticVendorIkaJvectormapJqueryJvectormap122Css, map[string]*bintree{
				}},
				"jquery-jvectormap-1.2.2.min.js": &bintree{staticVendorIkaJvectormapJqueryJvectormap122MinJs, map[string]*bintree{
				}},
				"jquery-jvectormap-us-mill-en.js": &bintree{staticVendorIkaJvectormapJqueryJvectormapUsMillEnJs, map[string]*bintree{
				}},
				"jquery-jvectormap-world-mill-en.js": &bintree{staticVendorIkaJvectormapJqueryJvectormapWorldMillEnJs, map[string]*bintree{
				}},
			}},
			"jQuery-Storage-API": &bintree{nil, map[string]*bintree{
				"jquery.storageapi.js": &bintree{staticVendorJqueryStorageApiJqueryStorageapiJs, map[string]*bintree{
				}},
			}},
			"jQuery-gMap": &bintree{nil, map[string]*bintree{
				"jquery.gmap.min.js": &bintree{staticVendorJqueryGmapJqueryGmapMinJs, map[string]*bintree{
				}},
			}},
			"jqcloud2": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jqcloud.css": &bintree{staticVendorJqcloud2DistJqcloudCss, map[string]*bintree{
					}},
					"jqcloud.js": &bintree{staticVendorJqcloud2DistJqcloudJs, map[string]*bintree{
					}},
				}},
			}},
			"jqgrid": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"ui.jqgrid.css": &bintree{staticVendorJqgridCssUiJqgridCss, map[string]*bintree{
					}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"i18n": &bintree{nil, map[string]*bintree{
						"grid.locale-en.js": &bintree{staticVendorJqgridJsI18nGridLocaleEnJs, map[string]*bintree{
						}},
					}},
					"jquery.jqGrid.js": &bintree{staticVendorJqgridJsJqueryJqgridJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jquery.js": &bintree{staticVendorJqueryDistJqueryJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery-classyloader": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.classyloader.min.js": &bintree{staticVendorJqueryClassyloaderJsJqueryClassyloaderMinJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery-knob": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.knob.js": &bintree{staticVendorJqueryKnobJsJqueryKnobJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery-localize-i18n": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jquery.localize.js": &bintree{staticVendorJqueryLocalizeI18nDistJqueryLocalizeJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery-ui": &bintree{nil, map[string]*bintree{
				"themes": &bintree{nil, map[string]*bintree{
					"smoothness": &bintree{nil, map[string]*bintree{
						"images": &bintree{nil, map[string]*bintree{
							"animated-overlay.gif": &bintree{staticVendorJqueryUiThemesSmoothnessImagesAnimatedOverlayGif, map[string]*bintree{
							}},
							"ui-bg_flat_0_aaaaaa_40x100.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_0_aaaaaa_40x100Png, map[string]*bintree{
							}},
							"ui-bg_flat_75_ffffff_40x100.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_flat_75_ffffff_40x100Png, map[string]*bintree{
							}},
							"ui-bg_glass_55_fbf9ee_1x400.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_55_fbf9ee_1x400Png, map[string]*bintree{
							}},
							"ui-bg_glass_65_ffffff_1x400.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{
							}},
							"ui-bg_glass_75_dadada_1x400.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_dadada_1x400Png, map[string]*bintree{
							}},
							"ui-bg_glass_75_e6e6e6_1x400.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_75_e6e6e6_1x400Png, map[string]*bintree{
							}},
							"ui-bg_glass_95_fef1ec_1x400.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_glass_95_fef1ec_1x400Png, map[string]*bintree{
							}},
							"ui-bg_highlight-soft_75_cccccc_1x100.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiBg_highlightSoft_75_cccccc_1x100Png, map[string]*bintree{
							}},
							"ui-icons_222222_256x240.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiIcons_222222_256x240Png, map[string]*bintree{
							}},
							"ui-icons_2e83ff_256x240.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiIcons_2e83ff_256x240Png, map[string]*bintree{
							}},
							"ui-icons_454545_256x240.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiIcons_454545_256x240Png, map[string]*bintree{
							}},
							"ui-icons_888888_256x240.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiIcons_888888_256x240Png, map[string]*bintree{
							}},
							"ui-icons_cd0a0a_256x240.png": &bintree{staticVendorJqueryUiThemesSmoothnessImagesUiIcons_cd0a0a_256x240Png, map[string]*bintree{
							}},
						}},
						"jquery-ui.css": &bintree{staticVendorJqueryUiThemesSmoothnessJqueryUiCss, map[string]*bintree{
						}},
						"jquery-ui.min.css": &bintree{staticVendorJqueryUiThemesSmoothnessJqueryUiMinCss, map[string]*bintree{
						}},
						"theme.css": &bintree{staticVendorJqueryUiThemesSmoothnessThemeCss, map[string]*bintree{
						}},
					}},
				}},
				"ui": &bintree{nil, map[string]*bintree{
					"accordion.js": &bintree{staticVendorJqueryUiUiAccordionJs, map[string]*bintree{
					}},
					"autocomplete.js": &bintree{staticVendorJqueryUiUiAutocompleteJs, map[string]*bintree{
					}},
					"button.js": &bintree{staticVendorJqueryUiUiButtonJs, map[string]*bintree{
					}},
					"core.js": &bintree{staticVendorJqueryUiUiCoreJs, map[string]*bintree{
					}},
					"datepicker.js": &bintree{staticVendorJqueryUiUiDatepickerJs, map[string]*bintree{
					}},
					"dialog.js": &bintree{staticVendorJqueryUiUiDialogJs, map[string]*bintree{
					}},
					"draggable.js": &bintree{staticVendorJqueryUiUiDraggableJs, map[string]*bintree{
					}},
					"droppable.js": &bintree{staticVendorJqueryUiUiDroppableJs, map[string]*bintree{
					}},
					"effect-blind.js": &bintree{staticVendorJqueryUiUiEffectBlindJs, map[string]*bintree{
					}},
					"effect-bounce.js": &bintree{staticVendorJqueryUiUiEffectBounceJs, map[string]*bintree{
					}},
					"effect-clip.js": &bintree{staticVendorJqueryUiUiEffectClipJs, map[string]*bintree{
					}},
					"effect-drop.js": &bintree{staticVendorJqueryUiUiEffectDropJs, map[string]*bintree{
					}},
					"effect-explode.js": &bintree{staticVendorJqueryUiUiEffectExplodeJs, map[string]*bintree{
					}},
					"effect-fade.js": &bintree{staticVendorJqueryUiUiEffectFadeJs, map[string]*bintree{
					}},
					"effect-fold.js": &bintree{staticVendorJqueryUiUiEffectFoldJs, map[string]*bintree{
					}},
					"effect-highlight.js": &bintree{staticVendorJqueryUiUiEffectHighlightJs, map[string]*bintree{
					}},
					"effect-puff.js": &bintree{staticVendorJqueryUiUiEffectPuffJs, map[string]*bintree{
					}},
					"effect-pulsate.js": &bintree{staticVendorJqueryUiUiEffectPulsateJs, map[string]*bintree{
					}},
					"effect-scale.js": &bintree{staticVendorJqueryUiUiEffectScaleJs, map[string]*bintree{
					}},
					"effect-shake.js": &bintree{staticVendorJqueryUiUiEffectShakeJs, map[string]*bintree{
					}},
					"effect-size.js": &bintree{staticVendorJqueryUiUiEffectSizeJs, map[string]*bintree{
					}},
					"effect-slide.js": &bintree{staticVendorJqueryUiUiEffectSlideJs, map[string]*bintree{
					}},
					"effect-transfer.js": &bintree{staticVendorJqueryUiUiEffectTransferJs, map[string]*bintree{
					}},
					"effect.js": &bintree{staticVendorJqueryUiUiEffectJs, map[string]*bintree{
					}},
					"menu.js": &bintree{staticVendorJqueryUiUiMenuJs, map[string]*bintree{
					}},
					"mouse.js": &bintree{staticVendorJqueryUiUiMouseJs, map[string]*bintree{
					}},
					"position.js": &bintree{staticVendorJqueryUiUiPositionJs, map[string]*bintree{
					}},
					"progressbar.js": &bintree{staticVendorJqueryUiUiProgressbarJs, map[string]*bintree{
					}},
					"resizable.js": &bintree{staticVendorJqueryUiUiResizableJs, map[string]*bintree{
					}},
					"selectable.js": &bintree{staticVendorJqueryUiUiSelectableJs, map[string]*bintree{
					}},
					"selectmenu.js": &bintree{staticVendorJqueryUiUiSelectmenuJs, map[string]*bintree{
					}},
					"slider.js": &bintree{staticVendorJqueryUiUiSliderJs, map[string]*bintree{
					}},
					"sortable.js": &bintree{staticVendorJqueryUiUiSortableJs, map[string]*bintree{
					}},
					"spinner.js": &bintree{staticVendorJqueryUiUiSpinnerJs, map[string]*bintree{
					}},
					"tabs.js": &bintree{staticVendorJqueryUiUiTabsJs, map[string]*bintree{
					}},
					"tooltip.js": &bintree{staticVendorJqueryUiUiTooltipJs, map[string]*bintree{
					}},
					"widget.js": &bintree{staticVendorJqueryUiUiWidgetJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery-validation": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jquery.validate.js": &bintree{staticVendorJqueryValidationDistJqueryValidateJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery.easing": &bintree{nil, map[string]*bintree{
				"js": &bintree{nil, map[string]*bintree{
					"jquery.easing.js": &bintree{staticVendorJqueryEasingJsJqueryEasingJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery.easy-pie-chart": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jquery.easypiechart.js": &bintree{staticVendorJqueryEasyPieChartDistJqueryEasypiechartJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery.inputmask": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"jquery.inputmask.bundle.js": &bintree{staticVendorJqueryInputmaskDistJqueryInputmaskBundleJs, map[string]*bintree{
					}},
				}},
			}},
			"jquery.steps": &bintree{nil, map[string]*bintree{
				"build": &bintree{nil, map[string]*bintree{
					"jquery.steps.js": &bintree{staticVendorJqueryStepsBuildJqueryStepsJs, map[string]*bintree{
					}},
				}},
			}},
			"jqueryui-touch-punch": &bintree{nil, map[string]*bintree{
				"jquery.ui.touch-punch.min.js": &bintree{staticVendorJqueryuiTouchPunchJqueryUiTouchPunchMinJs, map[string]*bintree{
				}},
			}},
			"loaders.css": &bintree{nil, map[string]*bintree{
				"loaders.css": &bintree{staticVendorLoadersCssLoadersCss, map[string]*bintree{
				}},
			}},
			"matchMedia": &bintree{nil, map[string]*bintree{
				"matchMedia.js": &bintree{staticVendorMatchmediaMatchmediaJs, map[string]*bintree{
				}},
			}},
			"mjolnic-bootstrap-colorpicker": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap-colorpicker.css": &bintree{staticVendorMjolnicBootstrapColorpickerDistCssBootstrapColorpickerCss, map[string]*bintree{
						}},
					}},
					"img": &bintree{nil, map[string]*bintree{
						"bootstrap-colorpicker": &bintree{nil, map[string]*bintree{
							"alpha-horizontal.png": &bintree{staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaHorizontalPng, map[string]*bintree{
							}},
							"alpha.png": &bintree{staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerAlphaPng, map[string]*bintree{
							}},
							"hue-horizontal.png": &bintree{staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHueHorizontalPng, map[string]*bintree{
							}},
							"hue.png": &bintree{staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerHuePng, map[string]*bintree{
							}},
							"saturation.png": &bintree{staticVendorMjolnicBootstrapColorpickerDistImgBootstrapColorpickerSaturationPng, map[string]*bintree{
							}},
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"bootstrap-colorpicker.js": &bintree{staticVendorMjolnicBootstrapColorpickerDistJsBootstrapColorpickerJs, map[string]*bintree{
						}},
					}},
				}},
			}},
			"modernizr": &bintree{nil, map[string]*bintree{
				"modernizr.custom.js": &bintree{staticVendorModernizrModernizrCustomJs, map[string]*bintree{
				}},
			}},
			"moment": &bintree{nil, map[string]*bintree{
				"min": &bintree{nil, map[string]*bintree{
					"moment-with-locales.min.js": &bintree{staticVendorMomentMinMomentWithLocalesMinJs, map[string]*bintree{
					}},
				}},
			}},
			"morris.js": &bintree{nil, map[string]*bintree{
				"morris.css": &bintree{staticVendorMorrisJsMorrisCss, map[string]*bintree{
				}},
				"morris.js": &bintree{staticVendorMorrisJsMorrisJs, map[string]*bintree{
				}},
			}},
			"nestable": &bintree{nil, map[string]*bintree{
				"jquery.nestable.js": &bintree{staticVendorNestableJqueryNestableJs, map[string]*bintree{
				}},
			}},
			"parsleyjs": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"parsley.min.js": &bintree{staticVendorParsleyjsDistParsleyMinJs, map[string]*bintree{
					}},
				}},
			}},
			"raphael": &bintree{nil, map[string]*bintree{
				"raphael.js": &bintree{staticVendorRaphaelRaphaelJs, map[string]*bintree{
				}},
			}},
			"rickshaw": &bintree{nil, map[string]*bintree{
				"rickshaw.js": &bintree{staticVendorRickshawRickshawJs, map[string]*bintree{
				}},
				"rickshaw.min.css": &bintree{staticVendorRickshawRickshawMinCss, map[string]*bintree{
				}},
			}},
			"screenfull": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"screenfull.js": &bintree{staticVendorScreenfullDistScreenfullJs, map[string]*bintree{
					}},
				}},
			}},
			"seiyria-bootstrap-slider": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"bootstrap-slider.min.js": &bintree{staticVendorSeiyriaBootstrapSliderDistBootstrapSliderMinJs, map[string]*bintree{
					}},
					"css": &bintree{nil, map[string]*bintree{
						"bootstrap-slider.min.css": &bintree{staticVendorSeiyriaBootstrapSliderDistCssBootstrapSliderMinCss, map[string]*bintree{
						}},
					}},
				}},
			}},
			"select2": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"css": &bintree{nil, map[string]*bintree{
						"select2.css": &bintree{staticVendorSelect2DistCssSelect2Css, map[string]*bintree{
						}},
					}},
					"js": &bintree{nil, map[string]*bintree{
						"select2.js": &bintree{staticVendorSelect2DistJsSelect2Js, map[string]*bintree{
						}},
					}},
				}},
			}},
			"select2-bootstrap-theme": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"select2-bootstrap.css": &bintree{staticVendorSelect2BootstrapThemeDistSelect2BootstrapCss, map[string]*bintree{
					}},
				}},
			}},
			"simple-line-icons": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"simple-line-icons.css": &bintree{staticVendorSimpleLineIconsCssSimpleLineIconsCss, map[string]*bintree{
					}},
				}},
				"fonts": &bintree{nil, map[string]*bintree{
					"Simple-Line-Icons.eot": &bintree{staticVendorSimpleLineIconsFontsSimpleLineIconsEot, map[string]*bintree{
					}},
					"Simple-Line-Icons.svg": &bintree{staticVendorSimpleLineIconsFontsSimpleLineIconsSvg, map[string]*bintree{
					}},
					"Simple-Line-Icons.ttf": &bintree{staticVendorSimpleLineIconsFontsSimpleLineIconsTtf, map[string]*bintree{
					}},
					"Simple-Line-Icons.woff": &bintree{staticVendorSimpleLineIconsFontsSimpleLineIconsWoff, map[string]*bintree{
					}},
					"Simple-Line-Icons.woff2": &bintree{staticVendorSimpleLineIconsFontsSimpleLineIconsWoff2, map[string]*bintree{
					}},
				}},
			}},
			"skycons": &bintree{nil, map[string]*bintree{
				"skycons.js": &bintree{staticVendorSkyconsSkyconsJs, map[string]*bintree{
				}},
			}},
			"slimScroll": &bintree{nil, map[string]*bintree{
				"jquery.slimscroll.min.js": &bintree{staticVendorSlimscrollJquerySlimscrollMinJs, map[string]*bintree{
				}},
			}},
			"sparkline": &bintree{nil, map[string]*bintree{
				"index.js": &bintree{staticVendorSparklineIndexJs, map[string]*bintree{
				}},
			}},
			"spinkit": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"spinkit.css": &bintree{staticVendorSpinkitCssSpinkitCss, map[string]*bintree{
					}},
				}},
			}},
			"sweetalert": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"sweetalert.css": &bintree{staticVendorSweetalertDistSweetalertCss, map[string]*bintree{
					}},
					"sweetalert.min.js": &bintree{staticVendorSweetalertDistSweetalertMinJs, map[string]*bintree{
					}},
				}},
			}},
			"weather-icons": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"weather-icons-wind.min.css": &bintree{staticVendorWeatherIconsCssWeatherIconsWindMinCss, map[string]*bintree{
					}},
					"weather-icons.min.css": &bintree{staticVendorWeatherIconsCssWeatherIconsMinCss, map[string]*bintree{
					}},
				}},
				"font": &bintree{nil, map[string]*bintree{
					"weathericons-regular-webfont.eot": &bintree{staticVendorWeatherIconsFontWeathericonsRegularWebfontEot, map[string]*bintree{
					}},
					"weathericons-regular-webfont.svg": &bintree{staticVendorWeatherIconsFontWeathericonsRegularWebfontSvg, map[string]*bintree{
					}},
					"weathericons-regular-webfont.ttf": &bintree{staticVendorWeatherIconsFontWeathericonsRegularWebfontTtf, map[string]*bintree{
					}},
					"weathericons-regular-webfont.woff": &bintree{staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff, map[string]*bintree{
					}},
					"weathericons-regular-webfont.woff2": &bintree{staticVendorWeatherIconsFontWeathericonsRegularWebfontWoff2, map[string]*bintree{
					}},
				}},
			}},
			"whirl": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"whirl.css": &bintree{staticVendorWhirlDistWhirlCss, map[string]*bintree{
					}},
				}},
			}},
			"x-editable": &bintree{nil, map[string]*bintree{
				"dist": &bintree{nil, map[string]*bintree{
					"bootstrap3-editable": &bintree{nil, map[string]*bintree{
						"css": &bintree{nil, map[string]*bintree{
							"bootstrap-editable.css": &bintree{staticVendorXEditableDistBootstrap3EditableCssBootstrapEditableCss, map[string]*bintree{
							}},
						}},
						"img": &bintree{nil, map[string]*bintree{
							"clear.png": &bintree{staticVendorXEditableDistBootstrap3EditableImgClearPng, map[string]*bintree{
							}},
							"loading.gif": &bintree{staticVendorXEditableDistBootstrap3EditableImgLoadingGif, map[string]*bintree{
							}},
						}},
						"js": &bintree{nil, map[string]*bintree{
							"bootstrap-editable.js": &bintree{staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableJs, map[string]*bintree{
							}},
							"bootstrap-editable.min.js": &bintree{staticVendorXEditableDistBootstrap3EditableJsBootstrapEditableMinJs, map[string]*bintree{
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

